[
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 1,
    "group": "cellcanvas",
    "name": "demo_v1",
    "version": "0.0.5",
    "title": "First portable CellCanvas demo.",
    "description": "First portable CellCanvas demo",
    "date": "2024-02-15T10:29:54.359355",
    "args": [
      {
        "description": "Path for the Zarr file",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 2,
    "group": "ux_evaluation_winter2024",
    "name": "python-nographics",
    "version": "0.0.1",
    "title": "Parent environment for supporting the Winter 2024 UX Evaluation.",
    "description": "Parent environment for supporting the Winter 2024 UX Evaluation",
    "date": "2024-08-11T10:28:18.948155",
    "args": [],
    "citation": [
      {
        "text": "Kyle. Also check out TeamTomo",
        "url": ""
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 3,
    "group": "ux_evaluation_winter2024",
    "name": "python-nographics",
    "version": "0.0.2",
    "title": "Parent environment for supporting the Winter 2024 UX Evaluation.",
    "description": "Parent environment for supporting the Winter 2024 UX Evaluation",
    "date": "2024-08-11T10:28:18.948155",
    "args": [],
    "citation": [
      {
        "text": "Kyle. Also check out TeamTomo",
        "url": ""
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 4,
    "group": "ux_evaluation_winter2024",
    "name": "fetch_data",
    "version": "0.0.1",
    "title": "Fetch datasets for the UX evaluation",
    "description": "Fetch datasets for the UX evaluation in Winter 2024.",
    "date": "2024-02-22T16:28:22.469722",
    "args": [
      {
        "default": "<all>",
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 5,
    "group": "ux_evaluation_winter2024",
    "name": "run_evaluation",
    "version": "0.0.1",
    "title": "Run UX Evaluation.",
    "description": "Run the UX evaluation itself",
    "date": "2024-08-11T10:28:32.557897",
    "args": [
      {
        "default": "cellcanvas_crop_007",
        "description": "Name of dataset for evaluation: cellcanvas_crop_007, cellcanvas_crop_009, or cellcanvas_crop_010",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 6,
    "group": "ux_evaluation_winter2024",
    "name": "run_evaluation",
    "version": "0.0.2",
    "title": "Run UX Evaluation.",
    "description": "Run the UX evaluation itself",
    "date": "2024-08-11T10:28:32.557897",
    "args": [
      {
        "default": "cellcanvas_crop_007",
        "description": "Name of dataset for evaluation: cellcanvas_crop_007, cellcanvas_crop_009, or cellcanvas_crop_010",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 7,
    "group": "ux_evaluation_winter2024",
    "name": "run_evaluation",
    "version": "0.0.3",
    "title": "Run UX Evaluation.",
    "description": "Run the UX evaluation itself",
    "date": "2024-08-11T10:28:32.557897",
    "args": [
      {
        "default": "cellcanvas_crop_007",
        "description": "Name of dataset for evaluation: cellcanvas_crop_007, cellcanvas_crop_009, or cellcanvas_crop_010",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 8,
    "group": "ux_evaluation_winter2024",
    "name": "export_evaluation",
    "version": "0.0.1",
    "title": "Export results of the UX evaluation",
    "description": "Export results of the UX evaluation.",
    "date": "2024-02-22T16:27:17.230180",
    "args": [
      {
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 9,
    "group": "ux_evaluation_winter2024",
    "name": "run_evaluation",
    "version": "0.0.4",
    "title": "Run UX Evaluation.",
    "description": "Run the UX evaluation itself",
    "date": "2024-08-11T10:28:32.557897",
    "args": [
      {
        "default": "cellcanvas_crop_007",
        "description": "Name of dataset for evaluation: cellcanvas_crop_007, cellcanvas_crop_009, or cellcanvas_crop_010",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 10,
    "group": "ux_evaluation_winter2024",
    "name": "python-nographics",
    "version": "0.0.3",
    "title": "Parent environment for supporting the Winter 2024 UX Evaluation.",
    "description": "Parent environment for supporting the Winter 2024 UX Evaluation",
    "date": "2024-08-11T10:28:18.948155",
    "args": [],
    "citation": [
      {
        "text": "Kyle. Also check out TeamTomo",
        "url": ""
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 11,
    "group": "ux_evaluation_winter2024",
    "name": "fetch_data",
    "version": "0.0.2",
    "title": "Fetch datasets for the UX evaluation",
    "description": "Fetch datasets for the UX evaluation in Winter 2024.",
    "date": "2024-02-22T16:28:22.469722",
    "args": [
      {
        "default": "<all>",
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 12,
    "group": "ux_evaluation_winter2024",
    "name": "export_evaluation",
    "version": "0.0.2",
    "title": "Export results of the UX evaluation",
    "description": "Export results of the UX evaluation.",
    "date": "2024-02-22T16:27:17.230180",
    "args": [
      {
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 13,
    "group": "ux_evaluation_winter2024",
    "name": "python-nographics",
    "version": "0.0.4",
    "title": "Parent environment for supporting the Winter 2024 UX Evaluation.",
    "description": "Parent environment for supporting the Winter 2024 UX Evaluation",
    "date": "2024-08-11T10:28:18.948155",
    "args": [],
    "citation": [
      {
        "text": "Kyle. Also check out TeamTomo",
        "url": ""
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 14,
    "group": "ux_evaluation_winter2024",
    "name": "export_evaluation",
    "version": "0.0.3",
    "title": "Export results of the UX evaluation",
    "description": "Export results of the UX evaluation.",
    "date": "2024-02-22T16:27:17.230180",
    "args": [
      {
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 15,
    "group": "ux_evaluation_winter2024",
    "name": "fetch_data",
    "version": "0.0.3",
    "title": "Fetch datasets for the UX evaluation",
    "description": "Fetch datasets for the UX evaluation in Winter 2024.",
    "date": "2024-02-22T16:28:22.469722",
    "args": [
      {
        "default": "<all>",
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 19,
    "group": "ux_evaluation_winter2024",
    "name": "run_evaluation",
    "version": "0.0.5",
    "title": "Run UX Evaluation.",
    "description": "Run the UX evaluation itself",
    "date": "2024-08-11T10:28:32.557897",
    "args": [
      {
        "default": "cellcanvas_crop_007",
        "description": "Name of dataset for evaluation: cellcanvas_crop_007, cellcanvas_crop_009, or cellcanvas_crop_010",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 20,
    "group": "ux_evaluation_winter2024",
    "name": "export_evaluation",
    "version": "0.0.4",
    "title": "Export results of the UX evaluation",
    "description": "Export results of the UX evaluation.",
    "date": "2024-02-22T16:27:17.230180",
    "args": [
      {
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 21,
    "group": "ux_evaluation_winter2024",
    "name": "fetch_data",
    "version": "0.0.4",
    "title": "Fetch datasets for the UX evaluation",
    "description": "Fetch datasets for the UX evaluation in Winter 2024.",
    "date": "2024-02-22T16:28:22.469722",
    "args": [
      {
        "default": "<all>",
        "description": "Path for the Zarr file",
        "name": "dataset_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "DataFrame",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 22,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.0.2",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 23,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.0.3",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 24,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.0.4",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 25,
    "group": "cellcanvas",
    "name": "cellcanvas",
    "version": "0.0.1",
    "title": "Run CellCanvas.",
    "description": "Run CellCanvas",
    "date": "2024-08-11T10:15:34.511822",
    "args": [],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 26,
    "group": "cellcanvas",
    "name": "surforama",
    "version": "0.0.1",
    "title": "Run Surforama",
    "description": "Run Surforama.",
    "date": "2024-03-19T09:24:32.865432",
    "args": [],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data conversion",
      "CellCanvas",
      "Zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 28,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.1",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 29,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.2",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 30,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.3",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 31,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.4",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 32,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.5",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 33,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.6",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 34,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.7",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 35,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.8",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 36,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.9",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 37,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.10",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 39,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.12",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 40,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.11",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 41,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.13",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 42,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.14",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 43,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.15",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 44,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.16",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 45,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.17",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 46,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.18",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 47,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.19",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 48,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.20",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 49,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.21",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 50,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.1",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 51,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.2",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 52,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.3",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 53,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.4",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 54,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.5",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 55,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.6",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 56,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.7",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 57,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.8",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 58,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.9",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 59,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.10",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 60,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.22",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 61,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.11",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 62,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.0.5",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 63,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.0.6",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 64,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.1",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 65,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.2",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 66,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.3",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 67,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.4",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 68,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.5",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 69,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.6",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 70,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.7",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 71,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.0.23",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 72,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.0.8",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 73,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.12",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 74,
    "group": "utils",
    "name": "mrc2omezarr",
    "version": "0.0.1",
    "title": "Convert a mrc to omezarr using mrc2omezarr",
    "description": "Convert a mrc to omezarr using mrc2omezarr.",
    "date": "2024-08-11T10:27:35.849625",
    "args": [
      {
        "description": "Path to the MRC file. Include the protocol if necessary (e.g., s3://).",
        "name": "mrc_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output Zarr file. Include the protocol if necessary (e.g., s3://).",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to read the MRC file in permissive mode.",
        "name": "permissive",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Whether to overwrite the output Zarr file.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "1,2,4",
        "description": "Scale factors for multiscale pyramid. Comma-separated list of integers.",
        "name": "scale_factors",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel size in Angstroms. Comma-separated list of floats or a single float. If not provided, it will be read from the MRC header.",
        "name": "voxel_size",
        "required": false,
        "type": "string"
      },
      {
        "description": "Whether the data is an image stack (determined from MRC-header by default).",
        "name": "is_image_stack",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 256,
        "description": "Chunk size for the Zarr file.",
        "name": "chunk_size",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Path to a JSON file containing additional arguments to pass to the fsspec-filesystem.",
        "name": "filesystem_args",
        "required": false,
        "type": "string"
      },
      {
        "default": "local_mean",
        "description": "Method to downscale the data. Options: local_mean, downsample.",
        "name": "pyramid_method",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Utz Ermel.",
        "url": "https://github.com/uermel/mrc2omezarr"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "mrc",
      "ome-zarr",
      "zarr"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 75,
    "group": "utils",
    "name": "mrc2omezarr",
    "version": "0.0.2",
    "title": "Convert a mrc to omezarr using mrc2omezarr",
    "description": "Convert a mrc to omezarr using mrc2omezarr.",
    "date": "2024-08-11T10:27:35.849625",
    "args": [
      {
        "description": "Path to the MRC file. Include the protocol if necessary (e.g., s3://).",
        "name": "mrc_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output Zarr file. Include the protocol if necessary (e.g., s3://).",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to read the MRC file in permissive mode.",
        "name": "permissive",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Whether to overwrite the output Zarr file.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "1,2,4",
        "description": "Scale factors for multiscale pyramid. Comma-separated list of integers.",
        "name": "scale_factors",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel size in Angstroms. Comma-separated list of floats or a single float. If not provided, it will be read from the MRC header.",
        "name": "voxel_size",
        "required": false,
        "type": "string"
      },
      {
        "description": "Whether the data is an image stack (determined from MRC-header by default).",
        "name": "is_image_stack",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 256,
        "description": "Chunk size for the Zarr file.",
        "name": "chunk_size",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Path to a JSON file containing additional arguments to pass to the fsspec-filesystem.",
        "name": "filesystem_args",
        "required": false,
        "type": "string"
      },
      {
        "default": "local_mean",
        "description": "Method to downscale the data. Options: local_mean, downsample.",
        "name": "pyramid_method",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Utz Ermel.",
        "url": "https://github.com/uermel/mrc2omezarr"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "mrc",
      "ome-zarr",
      "zarr"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 76,
    "group": "utils",
    "name": "mrc2omezarr",
    "version": "0.0.3",
    "title": "Convert a mrc to omezarr using mrc2omezarr",
    "description": "Convert a mrc to omezarr using mrc2omezarr.",
    "date": "2024-08-11T10:27:35.849625",
    "args": [
      {
        "description": "Path to the MRC file. Include the protocol if necessary (e.g., s3://).",
        "name": "mrc_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output Zarr file. Include the protocol if necessary (e.g., s3://).",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to read the MRC file in permissive mode.",
        "name": "permissive",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Whether to overwrite the output Zarr file.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "1,2,4",
        "description": "Scale factors for multiscale pyramid. Comma-separated list of integers.",
        "name": "scale_factors",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel size in Angstroms. Comma-separated list of floats or a single float. If not provided, it will be read from the MRC header.",
        "name": "voxel_size",
        "required": false,
        "type": "string"
      },
      {
        "description": "Whether the data is an image stack (determined from MRC-header by default).",
        "name": "is_image_stack",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 256,
        "description": "Chunk size for the Zarr file.",
        "name": "chunk_size",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Path to a JSON file containing additional arguments to pass to the fsspec-filesystem.",
        "name": "filesystem_args",
        "required": false,
        "type": "string"
      },
      {
        "default": "local_mean",
        "description": "Method to downscale the data. Options: local_mean, downsample.",
        "name": "pyramid_method",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Utz Ermel.",
        "url": "https://github.com/uermel/mrc2omezarr"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "mrc",
      "ome-zarr",
      "zarr"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 77,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.1",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 78,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.2",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 79,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.3",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 80,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.4",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 81,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.5",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 82,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.6",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 83,
    "group": "copick",
    "name": "cellcanvas-copick-macos",
    "version": "0.0.7",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:48.508053",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 84,
    "group": "copick",
    "name": "cellcanvas-copick-linux",
    "version": "0.0.7",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:34.852019",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 85,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.7",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 86,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.0.1",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 87,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.0.2",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 88,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.0.3",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 89,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.0.4",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 90,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.0.5",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 91,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.1",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 92,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.2",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 93,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.3",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 94,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.4",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 95,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.5",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 96,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.6",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 97,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.7",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 98,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.8",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 99,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.9",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 100,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.10",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 101,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.11",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 102,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.12",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 103,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.13",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 104,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.14",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 105,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.15",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 106,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.16",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 107,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.0.17",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 108,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.1.0",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 109,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.1.1",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 110,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.1.1",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 111,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.1.3",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 112,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.0.3",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 113,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.1",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 114,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.2",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 115,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.3",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 116,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.0",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 117,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.1",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 118,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.2",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 119,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.3",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 120,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.5",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 121,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.4",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 122,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.5",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 123,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.6",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 124,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.6",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 125,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.7",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 126,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.8",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 127,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.9",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 128,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.7",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 129,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.10",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 130,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.11",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 131,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.12",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 132,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.13",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 133,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.0",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 134,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.1",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 135,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.2",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 136,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.3",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 137,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.4",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 138,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.8",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 139,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.9",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 140,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.14",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 141,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.0.15",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 142,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.0.1",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 143,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.1",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 144,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.2",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 145,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.3",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 146,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.4",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 147,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.5",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 148,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.6",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 149,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.7",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 150,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.8",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 151,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.9",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 152,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.10",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 153,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.11",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 154,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.0.12",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 155,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.0",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 156,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.1",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 157,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.1",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 158,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.2",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 159,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.3",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 160,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.5",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 161,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.0.1",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 162,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.0.2",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 163,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.0.3",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 164,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.0.4",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 165,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.0.5",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 166,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.0.6",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 167,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.0",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 168,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.2",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 169,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.3",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 170,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.4",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 171,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.1.0",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 172,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.1.1",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 174,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.6",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 175,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.7",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 176,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.8",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 177,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.1",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 178,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.2",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 179,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.3",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 180,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.4",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 181,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.10",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 182,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.1",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 183,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.2",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 184,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.3",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 185,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.4",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 186,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.5",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 187,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.5",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 188,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.6",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 189,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.7",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 190,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.8",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 191,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.9",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 192,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.10",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 193,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.11",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 194,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.12",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 195,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.4",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 196,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.5",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 197,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.6",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 198,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.7",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 199,
    "group": "cellcanvas",
    "name": "train-model-lightgbm",
    "version": "0.0.1",
    "title": "Train LightGBM on Zarr Data with Cross-Validation",
    "description": "A solution that trains a LightGBM model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:41.336080",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained LightGBM model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 750,
        "description": "Number of trees in the LightGBM model.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 18,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.1,
        "description": "The learning rate.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "default": 31,
        "description": "Maximum number of leaves.",
        "name": "num_leaves",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the LightGBM model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "lightgbm",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 200,
    "group": "cellcanvas",
    "name": "train-model-lightgbm",
    "version": "0.0.2",
    "title": "Train LightGBM on Zarr Data with Cross-Validation",
    "description": "A solution that trains a LightGBM model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:41.336080",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained LightGBM model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 750,
        "description": "Number of trees in the LightGBM model.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 18,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.1,
        "description": "The learning rate.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "default": 31,
        "description": "Maximum number of leaves.",
        "name": "num_leaves",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the LightGBM model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "lightgbm",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 201,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.1",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 202,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.2",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 203,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.3",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 204,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.4",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 205,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.5",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 206,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.6",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 207,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.7",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 208,
    "group": "cellcanvas",
    "name": "optimize-xgboost",
    "version": "0.0.1",
    "title": "Optimize XGBoost with Optuna on Zarr Data",
    "description": "A solution that optimizes an XGBoost model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:07.568882",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 209,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.5",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 210,
    "group": "cellcanvas",
    "name": "optimize-xgboost",
    "version": "0.0.2",
    "title": "Optimize XGBoost with Optuna on Zarr Data",
    "description": "A solution that optimizes an XGBoost model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:07.568882",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 211,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.6",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 212,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.7",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 213,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.8",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 214,
    "group": "cellcanvas",
    "name": "optimize-xgboost",
    "version": "0.0.3",
    "title": "Optimize XGBoost with Optuna on Zarr Data",
    "description": "A solution that optimizes an XGBoost model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:07.568882",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 215,
    "group": "cellcanvas",
    "name": "optimize-xgboost",
    "version": "0.0.4",
    "title": "Optimize XGBoost with Optuna on Zarr Data",
    "description": "A solution that optimizes an XGBoost model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:07.568882",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 216,
    "group": "cellcanvas",
    "name": "optimize-xgboost",
    "version": "0.0.5",
    "title": "Optimize XGBoost with Optuna on Zarr Data",
    "description": "A solution that optimizes an XGBoost model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:07.568882",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 217,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.8",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 218,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.9",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 219,
    "group": "cellcanvas",
    "name": "segment-tomogram-xgboost",
    "version": "0.0.1",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:14:21.537779",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 220,
    "group": "cellcanvas",
    "name": "segment-tomogram-xgboost",
    "version": "0.0.2",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:14:21.537779",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 221,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.1",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 222,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.2",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 223,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.3",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 224,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.4",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 225,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.5",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 226,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.6",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 227,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.7",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 228,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.8",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 229,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.9",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 230,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.10",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 231,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.11",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 232,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.9",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 233,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.12",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 234,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.13",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 235,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.10",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 236,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.14",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 237,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.2.0",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 238,
    "group": "copick",
    "name": "get-median-embeddings",
    "version": "0.0.1",
    "title": "Analyze Median Embeddings for Each Object Type Across Multiple Runs",
    "description": "Generates a file containing the median embeddings for each object type based on the picks in multiple runs, filtered by user IDs if provided.",
    "date": "2024-08-11T10:21:15.646321",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of user IDs to filter picks by. If not provided, all picks will be processed.",
        "name": "user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output file.",
        "name": "output_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 239,
    "group": "copick",
    "name": "get-median-embeddings",
    "version": "0.0.2",
    "title": "Analyze Median Embeddings for Each Object Type Across Multiple Runs",
    "description": "Generates a file containing the median embeddings for each object type based on the picks in multiple runs, filtered by user IDs if provided.",
    "date": "2024-08-11T10:21:15.646321",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of user IDs to filter picks by. If not provided, all picks will be processed.",
        "name": "user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output file.",
        "name": "output_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 240,
    "group": "copick",
    "name": "get-median-embeddings",
    "version": "0.0.3",
    "title": "Analyze Median Embeddings for Each Object Type Across Multiple Runs",
    "description": "Generates a file containing the median embeddings for each object type based on the picks in multiple runs, filtered by user IDs if provided.",
    "date": "2024-08-11T10:21:15.646321",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of user IDs to filter picks by. If not provided, all picks will be processed.",
        "name": "user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output file.",
        "name": "output_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 241,
    "group": "copick",
    "name": "get-median-embeddings",
    "version": "0.0.4",
    "title": "Analyze Median Embeddings for Each Object Type Across Multiple Runs",
    "description": "Generates a file containing the median embeddings for each object type based on the picks in multiple runs, filtered by user IDs if provided.",
    "date": "2024-08-11T10:21:15.646321",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of user IDs to filter picks by. If not provided, all picks will be processed.",
        "name": "user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output file.",
        "name": "output_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 242,
    "group": "copick",
    "name": "get-median-embeddings",
    "version": "0.0.5",
    "title": "Analyze Median Embeddings for Each Object Type Across Multiple Runs",
    "description": "Generates a file containing the median embeddings for each object type based on the picks in multiple runs, filtered by user IDs if provided.",
    "date": "2024-08-11T10:21:15.646321",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of user IDs to filter picks by. If not provided, all picks will be processed.",
        "name": "user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output file.",
        "name": "output_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 243,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.11",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 244,
    "group": "copick",
    "name": "pick-distance-from-embedding",
    "version": "0.0.1",
    "title": "Create Picks with Distance to Median Embedding",
    "description": "Creates a new set of picks for a new session ID, containing the same locations but including the distance to the median embedding in the 'score' attribute.",
    "date": "2024-08-11T10:22:46.250574",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "New session ID for the newly created picks.",
        "name": "new_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Path to the JSON file containing median embeddings.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 245,
    "group": "copick",
    "name": "pick-distance-from-embedding",
    "version": "0.0.2",
    "title": "Create Picks with Distance to Median Embedding",
    "description": "Creates a new set of picks for a new session ID, containing the same locations but including the distance to the median embedding in the 'score' attribute.",
    "date": "2024-08-11T10:22:46.250574",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "New session ID for the newly created picks.",
        "name": "new_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Path to the JSON file containing median embeddings.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 246,
    "group": "copick",
    "name": "pick-distance-from-embedding",
    "version": "0.0.3",
    "title": "Create Picks with Distance to Median Embedding",
    "description": "Creates a new set of picks for a new session ID, containing the same locations but including the distance to the median embedding in the 'score' attribute.",
    "date": "2024-08-11T10:22:46.250574",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "New session ID for the newly created picks.",
        "name": "new_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Path to the JSON file containing median embeddings.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 247,
    "group": "copick",
    "name": "pick-distance-from-embedding",
    "version": "0.0.4",
    "title": "Create Picks with Distance to Median Embedding",
    "description": "Creates a new set of picks for a new session ID, containing the same locations but including the distance to the median embedding in the 'score' attribute.",
    "date": "2024-08-11T10:22:46.250574",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "New session ID for the newly created picks.",
        "name": "new_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Path to the JSON file containing median embeddings.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 248,
    "group": "copick",
    "name": "pick-distance-from-embedding",
    "version": "0.0.5",
    "title": "Create Picks with Distance to Median Embedding",
    "description": "Creates a new set of picks for a new session ID, containing the same locations but including the distance to the median embedding in the 'score' attribute.",
    "date": "2024-08-11T10:22:46.250574",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "New session ID for the newly created picks.",
        "name": "new_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Path to the JSON file containing median embeddings.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 249,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.12",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 250,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.13",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 251,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.14",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 252,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.15",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 253,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.16",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 254,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.17",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 255,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.18",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 256,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.19",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 257,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.20",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 258,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.21",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 259,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.0",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 260,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.1",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 261,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.2",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 262,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.3",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 263,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.4",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 264,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.5",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 265,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.6",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 266,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.7",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 267,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.8",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 268,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.9",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 269,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.10",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 270,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.11",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 271,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.0",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 272,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.1",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 273,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.2",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 274,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.3",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 275,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.4",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 276,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.5",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 277,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.6",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 278,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.8",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 279,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.9",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 280,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.10",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 281,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.12",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 282,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.13",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 283,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.11",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 284,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.1.12",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 285,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.6",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 286,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.0",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 287,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.1",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 288,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.2",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 289,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.3",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 290,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.4",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 291,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.5",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 293,
    "group": "utils",
    "name": "pdb-to-pns",
    "version": "0.0.1",
    "title": "Generate a PNS density image from PDB ID",
    "description": "Generate a Point Normal Surface (PNS) file from a PDB ID.",
    "date": "2024-08-11T10:27:57.186934",
    "args": [
      {
        "description": "PDB ID of the structure.",
        "name": "pdb_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output PNS file.",
        "name": "output_file",
        "required": true,
        "type": "string"
      },
      {
        "default": 10.0,
        "description": "Grid resolution for the PNS.",
        "name": "grid_resolution",
        "required": false,
        "type": "float"
      },
      {
        "default": 50.0,
        "description": "Grid spacing around the structure.",
        "name": "grid_spacing",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and copick teams",
        "url": "https://cellcanvas.org/"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "PDB",
      "grid",
      "surface",
      "structural biology",
      "pns"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 294,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.0",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 295,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.1",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 296,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.2",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 297,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.3",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 298,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.4",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 299,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.1",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 300,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.2",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 301,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.3",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 302,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.4",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 303,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.5",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 304,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.6",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 305,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.7",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 306,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.8",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 307,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.9",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 308,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.10",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 309,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.11",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 310,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.12",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 311,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.13",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 312,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.1",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 313,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.2",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 314,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.3",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 315,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.4",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 316,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.5",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 317,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.6",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 318,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.7",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 319,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.8",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 320,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.9",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 321,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.15",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 322,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.16",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 323,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.17",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 324,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.18",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 325,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.19",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 326,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.20",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 327,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.21",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 328,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.22",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 329,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.23",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 330,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.24",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 331,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.25",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 332,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.26",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 333,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.27",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 334,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.28",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 335,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.29",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 336,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.30",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 337,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.1",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 338,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.2",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 339,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.3",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 340,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.4",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 341,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.6",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 342,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.7",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 343,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.8",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 344,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.9",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 345,
    "group": "copick",
    "name": "copick_live",
    "version": "0.0.1",
    "title": "Run CoPick Live.",
    "description": "Run CoPick Live",
    "date": "2024-08-11T10:19:17.322093",
    "args": [
      {
        "description": "Path to the configuration file.",
        "name": "config_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CoPick Live team.",
        "url": "https://github.com/zhuowenzhao/copick_live"
      }
    ],
    "authors": [
      "Zhuowen Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "copick_live"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 346,
    "group": "copick",
    "name": "copick_live",
    "version": "0.0.2",
    "title": "Run CoPick Live.",
    "description": "Run CoPick Live",
    "date": "2024-08-11T10:19:17.322093",
    "args": [
      {
        "description": "Path to the configuration file.",
        "name": "config_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CoPick Live team.",
        "url": "https://github.com/zhuowenzhao/copick_live"
      }
    ],
    "authors": [
      "Zhuowen Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "copick_live"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 347,
    "group": "copick",
    "name": "copick_live",
    "version": "0.0.3",
    "title": "Run CoPick Live.",
    "description": "Run CoPick Live",
    "date": "2024-08-11T10:19:17.322093",
    "args": [
      {
        "description": "Path to the configuration file.",
        "name": "config_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CoPick Live team.",
        "url": "https://github.com/zhuowenzhao/copick_live"
      }
    ],
    "authors": [
      "Zhuowen Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "copick_live"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 348,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.2.0",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 349,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.2.1",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 350,
    "group": "copick",
    "name": "grid-picks",
    "version": "0.0.1",
    "title": "Grid Picks from Tomogram",
    "description": "A solution that places a grid of picks based on the radius of each pickable object, parameterized by a multiple of the particle radius, using tomogram shape.",
    "date": "2024-08-11T10:21:49.907167",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Factor to multiply the particle radius by to determine grid spacing.",
        "name": "grid_spacing_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified, process all runs.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "grid",
      "picks",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 351,
    "group": "copick",
    "name": "grid-picks",
    "version": "0.0.2",
    "title": "Grid Picks from Tomogram",
    "description": "A solution that places a grid of picks based on the radius of each pickable object, parameterized by a multiple of the particle radius, using tomogram shape.",
    "date": "2024-08-11T10:21:49.907167",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Factor to multiply the particle radius by to determine grid spacing.",
        "name": "grid_spacing_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified, process all runs.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "grid",
      "picks",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 352,
    "group": "copick",
    "name": "grid-picks",
    "version": "0.0.3",
    "title": "Grid Picks from Tomogram",
    "description": "A solution that places a grid of picks based on the radius of each pickable object, parameterized by a multiple of the particle radius, using tomogram shape.",
    "date": "2024-08-11T10:21:49.907167",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Factor to multiply the particle radius by to determine grid spacing.",
        "name": "grid_spacing_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified, process all runs.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "grid",
      "picks",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 353,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.1",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 354,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.2",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 355,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.3",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 356,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.4",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 357,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.5",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 358,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.6",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 359,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.8",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 360,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.9",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 361,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.10",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 362,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.11",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 363,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.14",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 364,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.15",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 365,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.16",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 366,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.17",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 367,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.1",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 368,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.2",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 369,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.3",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 370,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.4",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 371,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.5",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 372,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.6",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 373,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.7",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 374,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.8",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 375,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.9",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 376,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.10",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 377,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.1",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 378,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.2",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 379,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.3",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 380,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.4",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 381,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.5",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 382,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.6",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 383,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.7",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 384,
    "group": "copick",
    "name": "voxel-counts-per-label",
    "version": "0.1.0",
    "title": "Voxel Counts per Label",
    "description": "A solution that counts the number of voxels per label in a segmentation and saves the results as a CSV and HTML page.",
    "date": "2024-08-11T10:23:48.244324",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the segmentation to process.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output path for the CSV file.",
        "name": "output_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output path for the HTML file.",
        "name": "output_html",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "voxels",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 385,
    "group": "copick",
    "name": "voxel-counts-per-label",
    "version": "0.1.1",
    "title": "Voxel Counts per Label",
    "description": "A solution that counts the number of voxels per label in a segmentation and saves the results as a CSV and HTML page.",
    "date": "2024-08-11T10:23:48.244324",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the segmentation to process.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output path for the CSV file.",
        "name": "output_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output path for the HTML file.",
        "name": "output_html",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "voxels",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 386,
    "group": "copick",
    "name": "napari-copick",
    "version": "0.0.1",
    "title": "Napari Copick Plugin Launcher",
    "description": "A solution that installs napari-copick and launches the CopickPlugin.",
    "date": "2024-08-11T10:22:16.901955",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "copick",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 387,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.31",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 388,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.32",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 389,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.33",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 390,
    "group": "copick",
    "name": "bulk-evaluation",
    "version": "0.0.1",
    "title": "Compare All Picks from Different Users and Sessions",
    "description": "A solution that uses the compare-picks album solution to evaluate all user_id and session_id pairs listed in a CSV file, creating JSON output files for each pair in a specified directory and submitting jobs to Slurm.",
    "date": "2024-08-11T10:18:07.518210",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Directory to save the output JSON files.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file containing user_id and session_id pairs to process.",
        "name": "candidates_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "JSON string with weights for each particle type.",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick",
      "slurm"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 391,
    "group": "copick",
    "name": "bulk-evaluation",
    "version": "0.0.2",
    "title": "Compare All Picks from Different Users and Sessions",
    "description": "A solution that uses the compare-picks album solution to evaluate all user_id and session_id pairs listed in a CSV file, creating JSON output files for each pair in a specified directory and submitting jobs to Slurm.",
    "date": "2024-08-11T10:18:07.518210",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Directory to save the output JSON files.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file containing user_id and session_id pairs to process.",
        "name": "candidates_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "JSON string with weights for each particle type.",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick",
      "slurm"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 392,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.34",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 393,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.35",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 394,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.36",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 395,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding_mrc",
    "version": "0.0.1",
    "title": "Train SwinUnetr Pixel Embedding Network with Mrc Dtataloader",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-07-25T12:30:11.405307",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "tomogram mrc files directory for training dataset",
        "name": "train_tomogram_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "mask mrc files directory for taining dataset",
        "name": "train_mask_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "tomogram mrc files directory for validation dataset",
        "name": "val_tomogram_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "mask mrc files directory for validation dataset",
        "name": "val_mask_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.0001,
        "description": "Learning reate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "output dir name in curr working dir. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi",
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 396,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.37",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 397,
    "group": "copick",
    "name": "bulk-evaluation",
    "version": "0.0.3",
    "title": "Compare All Picks from Different Users and Sessions",
    "description": "A solution that uses the compare-picks album solution to evaluate all user_id and session_id pairs listed in a CSV file, creating JSON output files for each pair in a specified directory and submitting jobs to Slurm.",
    "date": "2024-08-11T10:18:07.518210",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Directory to save the output JSON files.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file containing user_id and session_id pairs to process.",
        "name": "candidates_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "JSON string with weights for each particle type.",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick",
      "slurm"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 398,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.1",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 399,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.2",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 400,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.3",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 401,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.4",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 402,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.5",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 403,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.6",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 404,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.7",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 405,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.8",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 406,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.9",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 407,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.10",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 408,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.11",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 409,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.12",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 410,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding_copick",
    "version": "0.0.1",
    "title": "Train SwinUNETR Pixel Embedding Network with Copick Dataset",
    "description": "Train the SwinUNETR pixel embedding network using the Copick dataset.",
    "date": "2024-09-13T11:48:27.578350",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi",
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 411,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding_copick",
    "version": "0.0.2",
    "title": "Train SwinUNETR Pixel Embedding Network with Copick Dataset",
    "description": "Train the SwinUNETR pixel embedding network using the Copick dataset.",
    "date": "2024-09-13T11:48:27.578350",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi",
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 412,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.1",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 413,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.2",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 414,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.3",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 415,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.4",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 416,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.5",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 417,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.6",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 418,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.7",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 419,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.8",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 420,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.9",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 421,
    "group": "copick",
    "name": "export-to-hdf",
    "version": "0.0.1",
    "title": "Export Copick Runs to HDF5",
    "description": "A solution that exports multiple Copick runs' tomograms and picks into an HDF5 file.",
    "date": "2024-08-11T10:20:30.692182",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output HDF5 file.",
        "name": "output_hdf_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale tomogram and pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to export (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Filter picks by user ID.",
        "name": "user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Filter picks by session ID.",
        "name": "session_id",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data export",
      "zarr",
      "hdf5",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 422,
    "group": "copick",
    "name": "export-to-hdf",
    "version": "0.0.2",
    "title": "Export Copick Runs to HDF5",
    "description": "A solution that exports multiple Copick runs' tomograms and picks into an HDF5 file.",
    "date": "2024-08-11T10:20:30.692182",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output HDF5 file.",
        "name": "output_hdf_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale tomogram and pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to export (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Filter picks by user ID.",
        "name": "user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Filter picks by session ID.",
        "name": "session_id",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data export",
      "zarr",
      "hdf5",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 423,
    "group": "copick",
    "name": "export-to-hdf",
    "version": "0.0.3",
    "title": "Export Copick Runs to HDF5",
    "description": "A solution that exports multiple Copick runs' tomograms and picks into an HDF5 file.",
    "date": "2024-08-11T10:20:30.692182",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output HDF5 file.",
        "name": "output_hdf_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale tomogram and pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to export (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Filter picks by user ID.",
        "name": "user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Filter picks by session ID.",
        "name": "session_id",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data export",
      "zarr",
      "hdf5",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 424,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.10",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 425,
    "group": "kephale",
    "name": "model-search-copick",
    "version": "0.0.1",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-11T10:25:20.399827",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 426,
    "group": "kephale",
    "name": "model-search-copick",
    "version": "0.0.2",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-11T10:25:20.399827",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 427,
    "group": "kephale",
    "name": "model-search-copick",
    "version": "0.0.3",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-11T10:25:20.399827",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 428,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.1",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 429,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.2",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 430,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.11",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 431,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.3",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 432,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.4",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 433,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.12",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 434,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.1",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 435,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.13",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 436,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.14",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 437,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.2",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 438,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.5",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 439,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.15",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 440,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.6",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 441,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.3",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 442,
    "group": "environments",
    "name": "copick-monai",
    "version": "0.0.1",
    "title": "An environment to support copick monai projects",
    "description": "An album solution for copick monai morphospaces projects .",
    "date": "2024-08-11T10:24:53.329535",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 444,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.4",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 445,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.16",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 446,
    "group": "environments",
    "name": "copick-monai",
    "version": "0.0.2",
    "title": "An environment to support copick monai projects",
    "description": "An album solution for copick monai morphospaces projects .",
    "date": "2024-08-11T10:24:53.329535",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 447,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.17",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 448,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.5",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 449,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.7",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 450,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.8",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 451,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.6",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 452,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.7",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 453,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.9",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 454,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.18",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 455,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.19",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 456,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.10",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 457,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.20",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 458,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.8",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 459,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.21",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 460,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.9",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 461,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.11",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 462,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.12",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 463,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding_copick",
    "version": "0.0.3",
    "title": "Train SwinUNETR Pixel Embedding Network with Copick Dataset",
    "description": "Train the SwinUNETR pixel embedding network using the Copick dataset.",
    "date": "2024-09-13T11:48:27.578350",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi",
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 464,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.12",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 465,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.1",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 466,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.2",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 467,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.3",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 468,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.4",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 469,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.5",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 470,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.6",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 471,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.22",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 472,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.10",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 473,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.13",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 474,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.2.2",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 475,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.23",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 476,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.24",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 477,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.11",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 478,
    "group": "kephale",
    "name": "train-resunet-copick",
    "version": "0.0.14",
    "title": "Train 3D ResUNet for Segmentation with Copick Dataset",
    "description": "Train a 3D ResUNet network using the Copick dataset for segmentation.",
    "date": "2024-07-31T21:47:56.758645",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the ResUNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "resunet_experiment",
        "description": "mlflow experiment name. Default is resunet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 479,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.7",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 480,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.25",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 481,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.26",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 482,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.27",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 483,
    "group": "kephale",
    "name": "train-swin-unetr-copick",
    "version": "0.0.12",
    "title": "Train 3D Swin UNETR for Segmentation with Copick Dataset",
    "description": "Train a 3D Swin UNETR network using the Copick dataset for segmentation.",
    "date": "2024-08-01T08:32:05.788421",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the Swin UNETR training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "swin_unetr_experiment",
        "description": "mlflow experiment name. Default is swin_unetr_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training and validation",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 48,
        "description": "Feature size for the Swin UNETR model",
        "name": "feature_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 484,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.5",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 485,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.6",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 486,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.7",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 487,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.8",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 488,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.9",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 489,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.10",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 490,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.11",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 491,
    "group": "environments",
    "name": "polnet",
    "version": "0.0.1",
    "title": "An environment to support polnet and copick",
    "description": "An album solution for copick polnet projects .",
    "date": "2024-08-11T10:25:05.212964",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 492,
    "group": "environments",
    "name": "polnet",
    "version": "0.0.2",
    "title": "An environment to support polnet and copick",
    "description": "An album solution for copick polnet projects .",
    "date": "2024-08-11T10:25:05.212964",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 493,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.12",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 494,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.13",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 495,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.14",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 496,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.15",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 497,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.16",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 498,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.17",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 499,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.18",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 500,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.19",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 501,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.20",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 502,
    "group": "polnet",
    "name": "generate-tomogram",
    "version": "0.1.21",
    "title": "Generate a tomogram with polnet",
    "description": "Generate tomograms with polnet, and save them in a Zarr.",
    "date": "2024-08-01T21:32:48.330376",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run for organizing outputs",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for Copick",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for Copick",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the segmentation in Copick",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram for naming in Copick",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Return only the labels for proteins (true/false)",
        "name": "return_protein_labels_only",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 503,
    "group": "kephale",
    "name": "predict-unet-copick",
    "version": "0.0.8",
    "title": "Generate Segmentation Masks using UNet Checkpoint",
    "description": "Generate segmentation masks using a trained UNet checkpoint on the Copick dataset.",
    "date": "2024-08-02T11:04:07.766321",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for testing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Path to the trained UNet checkpoint",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for inference",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to output probability maps",
        "name": "output_probability_maps",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 504,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.28",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 505,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.29",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 506,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.30",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 507,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.31",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 508,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.32",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 509,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.33",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 510,
    "group": "kephale",
    "name": "train-unet-copick",
    "version": "0.0.34",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-02T14:08:39.765337",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": "unet_experiment",
        "description": "mlflow experiment name. Default is unet_experiment",
        "name": "experiment_name",
        "required": false,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Batch size for training",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 10000,
        "description": "Maximum number of epochs for training",
        "name": "max_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number of residual units in the UNet model",
        "name": "num_res_units",
        "required": false,
        "type": "integer"
      },
      {
        "default": 2,
        "description": "Number output classes",
        "name": "num_classes",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 511,
    "group": "copick",
    "name": "Segment-anything2-tomogram-slice-inference",
    "version": "0.0.1",
    "title": "Generate segmentation masks for Copick Dataset using Segment Anything 2",
    "description": "Automatically generate segmentation masks for the Copick dataset. Install on a device with GPU access. Need cuda/12.1.1_530.30.02 and cudnn/8.9.7.29_cuda12 to compile.",
    "date": "2024-08-02T17:01:57.141855",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run in the Copick project for inferencing",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Z-index of the tomogram slice",
        "name": "slice_index",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the pre-downloaded SAM2 checkpoints",
        "name": "sam2_checkpoint",
        "required": true,
        "type": "string"
      },
      {
        "description": "Model configuration file corresponds to the SAM2 checkpoints",
        "name": "model_cfg",
        "required": true,
        "type": "string"
      },
      {
        "default": "outputs",
        "description": "Output directory name in the current working directory. Default is outputs",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Meta AI team.",
        "url": "https://ai.meta.com/blog/segment-anything-2/"
      }
    ],
    "authors": [
      "Zhuowen Zhao, Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "SAM 2"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 512,
    "group": "cellcanvas",
    "name": "embedding-projector",
    "version": "0.0.1",
    "title": "Generate a Tensorboard projector for visualzing the embeddings",
    "description": "Automatically generate Tensorboard event files and launch a visualizer for it. Currently suppot zarr and npy files.",
    "date": "2024-08-09T23:41:30.851947",
    "args": [
      {
        "default": true,
        "description": "Channel first for the embedding vectors. Default is True.",
        "name": "channel_first",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "Path to the feature vector embeddings",
        "name": "embeddings",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the labels correspond to the embeddings. Labels should be (N,) shape or a flattened array.",
        "name": "labels",
        "required": false,
        "type": "string"
      },
      {
        "description": "Key to get the embeding zarr file.",
        "name": "embed_zarr_key",
        "required": false,
        "type": "string"
      },
      {
        "description": "Key to get the label zarr file.",
        "name": "label_zarr_key",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the npy image files corresponds to the embeddings.",
        "name": "label_img",
        "required": false,
        "type": "string"
      },
      {
        "default": "runs/tensorboard",
        "description": "Output directory name in the current working directory/runs. Default is runs/tensorboard",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": 0.01,
        "description": "Percentage of the features to visualize (<= 1000). Default is 0.01",
        "name": "k",
        "required": false,
        "type": "float"
      },
      {
        "default": "6006",
        "description": "Port number to launch Tensorboard server. Default is 6006",
        "name": "port",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Tensorboard Team.",
        "url": "https://www.tensorflow.org/tensorboard"
      }
    ],
    "authors": [
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "tensorboard",
      "embedding",
      "visualization",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 513,
    "group": "album",
    "name": "server",
    "version": "0.0.1",
    "title": "FastAPI Album Server",
    "description": "A FastAPI server to manage Album solutions.",
    "date": "2024-08-11T10:24:05.389309",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 514,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.6",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 515,
    "group": "cellcanvas",
    "name": "embedding-projector",
    "version": "0.0.2",
    "title": "Generate a Tensorboard projector for visualzing the embeddings",
    "description": "Automatically generate Tensorboard event files and launch a visualizer for it. Currently suppot zarr and npy files.",
    "date": "2024-08-09T23:41:30.851947",
    "args": [
      {
        "default": true,
        "description": "Channel first for the embedding vectors. Default is True.",
        "name": "channel_first",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "Path to the feature vector embeddings",
        "name": "embeddings",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the labels correspond to the embeddings. Labels should be (N,) shape or a flattened array.",
        "name": "labels",
        "required": false,
        "type": "string"
      },
      {
        "description": "Key to get the embeding zarr file.",
        "name": "embed_zarr_key",
        "required": false,
        "type": "string"
      },
      {
        "description": "Key to get the label zarr file.",
        "name": "label_zarr_key",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the npy image files corresponds to the embeddings.",
        "name": "label_img",
        "required": false,
        "type": "string"
      },
      {
        "default": "runs/tensorboard",
        "description": "Output directory name in the current working directory/runs. Default is runs/tensorboard",
        "name": "logdir",
        "required": false,
        "type": "string"
      },
      {
        "default": 0.01,
        "description": "Percentage of the features to visualize (<= 1000). Default is 0.01",
        "name": "k",
        "required": false,
        "type": "float"
      },
      {
        "default": "6006",
        "description": "Port number to launch Tensorboard server. Default is 6006",
        "name": "port",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Tensorboard Team.",
        "url": "https://www.tensorflow.org/tensorboard"
      }
    ],
    "authors": [
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "tensorboard",
      "embedding",
      "visualization",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 516,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.1",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 517,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.2",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 518,
    "group": "cellcanvas",
    "name": "napari-cellcanvas",
    "version": "0.0.1",
    "title": "napari-CellCanvas",
    "description": "A solution that launches napari-cellcanvas with optional config fetching.",
    "date": "2024-08-13T11:22:16.420429",
    "args": [
      {
        "default": "/Users/kharrington/Data/copick/cellcanvas_server/local_sshOverlay_localStatic.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "localhost",
        "description": "Hostname for the server.",
        "name": "hostname",
        "required": true,
        "type": "string"
      },
      {
        "default": 8080,
        "description": "Port number for the server.",
        "name": "port",
        "required": true,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to fetch the config from the server.",
        "name": "fetch_config",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the overlay path should be remote (SSH).",
        "name": "overlay_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the static path should be remote (SSH).",
        "name": "static_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "The local path for the overlay root if not remote.",
        "name": "overlay_path",
        "required": false,
        "type": "string"
      },
      {
        "description": "The local path for the static root if not remote.",
        "name": "static_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "cellcanvas",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 519,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.3",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 520,
    "group": "cellcanvas",
    "name": "fetch-config",
    "version": "0.0.1",
    "title": "Fetch Copick Config and Write to File",
    "description": "Fetches a Copick config from a FastAPI server and writes it to a file.",
    "date": "2024-08-11T09:22:44.750526",
    "args": [
      {
        "default": "127.0.0.1",
        "description": "The localhost where the FastAPI server is running.",
        "name": "localhost",
        "type": "string"
      },
      {
        "default": 8000,
        "description": "The port on which the FastAPI server is listening.",
        "name": "port",
        "type": "integer"
      },
      {
        "default": false,
        "description": "Set to true if the overlay path should be remote (SSH).",
        "name": "overlay_remote",
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the static path should be remote (SSH).",
        "name": "static_remote",
        "type": "boolean"
      },
      {
        "default": "local:///path/to/overlay",
        "description": "The local path for the overlay root if not remote.",
        "name": "overlay_path",
        "type": "string"
      },
      {
        "default": "local:///path/to/static",
        "description": "The local path for the static root if not remote.",
        "name": "static_path",
        "type": "string"
      },
      {
        "default": "/path/to/output/config.json",
        "description": "The file path where the config will be written.",
        "name": "filepath",
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "config",
      "fetch"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 521,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.4",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 522,
    "group": "cellcanvas",
    "name": "napari-cellcanvas",
    "version": "0.0.2",
    "title": "napari-CellCanvas",
    "description": "A solution that launches napari-cellcanvas with optional config fetching.",
    "date": "2024-08-13T11:22:16.420429",
    "args": [
      {
        "default": "/Users/kharrington/Data/copick/cellcanvas_server/local_sshOverlay_localStatic.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "localhost",
        "description": "Hostname for the server.",
        "name": "hostname",
        "required": true,
        "type": "string"
      },
      {
        "default": 8080,
        "description": "Port number for the server.",
        "name": "port",
        "required": true,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to fetch the config from the server.",
        "name": "fetch_config",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the overlay path should be remote (SSH).",
        "name": "overlay_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the static path should be remote (SSH).",
        "name": "static_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "The local path for the overlay root if not remote.",
        "name": "overlay_path",
        "required": false,
        "type": "string"
      },
      {
        "description": "The local path for the static root if not remote.",
        "name": "static_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "cellcanvas",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 523,
    "group": "cellcanvas",
    "name": "napari-cellcanvas",
    "version": "0.0.3",
    "title": "napari-CellCanvas",
    "description": "A solution that launches napari-cellcanvas with optional config fetching.",
    "date": "2024-08-13T11:22:16.420429",
    "args": [
      {
        "default": "/Users/kharrington/Data/copick/cellcanvas_server/local_sshOverlay_localStatic.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "localhost",
        "description": "Hostname for the server.",
        "name": "hostname",
        "required": true,
        "type": "string"
      },
      {
        "default": 8080,
        "description": "Port number for the server.",
        "name": "port",
        "required": true,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to fetch the config from the server.",
        "name": "fetch_config",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the overlay path should be remote (SSH).",
        "name": "overlay_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the static path should be remote (SSH).",
        "name": "static_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "The local path for the overlay root if not remote.",
        "name": "overlay_path",
        "required": false,
        "type": "string"
      },
      {
        "description": "The local path for the static root if not remote.",
        "name": "static_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "cellcanvas",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 524,
    "group": "cellcanvas",
    "name": "napari-cellcanvas",
    "version": "0.0.4",
    "title": "napari-CellCanvas",
    "description": "A solution that launches napari-cellcanvas with optional config fetching.",
    "date": "2024-08-13T11:22:16.420429",
    "args": [
      {
        "default": "/Users/kharrington/Data/copick/cellcanvas_server/local_sshOverlay_localStatic.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "localhost",
        "description": "Hostname for the server.",
        "name": "hostname",
        "required": true,
        "type": "string"
      },
      {
        "default": 8080,
        "description": "Port number for the server.",
        "name": "port",
        "required": true,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to fetch the config from the server.",
        "name": "fetch_config",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the overlay path should be remote (SSH).",
        "name": "overlay_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the static path should be remote (SSH).",
        "name": "static_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "The local path for the overlay root if not remote.",
        "name": "overlay_path",
        "required": false,
        "type": "string"
      },
      {
        "description": "The local path for the static root if not remote.",
        "name": "static_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "cellcanvas",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 525,
    "group": "cellcanvas",
    "name": "segment-tomogram-xgboost",
    "version": "0.0.3",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:14:21.537779",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 526,
    "group": "cellcanvas",
    "name": "train-model-xgboost",
    "version": "0.0.10",
    "title": "Train XGBoost on Zarr Data with Cross-Validation",
    "description": "A solution that trains an XGBoost model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:14:43.954615",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 527,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.5",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 528,
    "group": "cellcanvas",
    "name": "cellcanvas",
    "version": "0.0.2",
    "title": "Run CellCanvas.",
    "description": "Run CellCanvas",
    "date": "2024-08-11T10:15:34.511822",
    "args": [],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 529,
    "group": "cellcanvas",
    "name": "train-model",
    "version": "0.1.8",
    "title": "Train Random Forest on Zarr Data with Cross-Validation",
    "description": "A solution that trains a Random Forest model using data from a Zarr zip store, filters runs with only one label, and performs cross-validation.",
    "date": "2024-08-11T10:15:51.550886",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 200,
        "description": "Number of trees in the Random Forest.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 14,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.4950333081205326,
        "description": "The maximum number of samples to draw from X to train each base estimator.",
        "name": "max_samples",
        "required": false,
        "type": "float"
      },
      {
        "default": 2,
        "description": "The minimum number of samples required to split an internal node.",
        "name": "min_samples_split",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1,
        "description": "The minimum number of samples required to be at a leaf node.",
        "name": "min_samples_leaf",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the Random Forest model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Number of folds for cross-validation.",
        "name": "n_splits",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 530,
    "group": "cellcanvas",
    "name": "optimize-xgboost",
    "version": "0.0.6",
    "title": "Optimize XGBoost with Optuna on Zarr Data",
    "description": "A solution that optimizes an XGBoost model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:07.568882",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 531,
    "group": "cellcanvas",
    "name": "segment-tomogram",
    "version": "0.1.9",
    "title": "Predict a Multilabel Segmentation Using a Model",
    "description": "A solution that predicts segmentation using a model for a Copick project and saves it as 'predictionsegmentation'.",
    "date": "2024-08-11T10:16:24.969734",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the trained model file.",
        "name": "model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 532,
    "group": "cellcanvas",
    "name": "train-model-lightgbm",
    "version": "0.0.3",
    "title": "Train LightGBM on Zarr Data with Cross-Validation",
    "description": "A solution that trains a LightGBM model using data from a Zarr zip store, filters runs with only one label, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:41.336080",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained LightGBM model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 750,
        "description": "Number of trees in the LightGBM model.",
        "name": "n_estimators",
        "required": false,
        "type": "integer"
      },
      {
        "default": 18,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.1,
        "description": "The learning rate.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "default": 31,
        "description": "Maximum number of leaves.",
        "name": "num_leaves",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the LightGBM model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "lightgbm",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 533,
    "group": "cellcanvas",
    "name": "optimize-random-forest",
    "version": "0.0.13",
    "title": "Optimize Random Forest with Optuna on Zarr Data",
    "description": "A solution that optimizes a Random Forest model using Optuna, data from a Zarr zip store, and performs 10-fold cross-validation.",
    "date": "2024-08-11T10:16:58.333537",
    "args": [
      {
        "description": "Path to the input Zarr zip store containing the features and labels.",
        "name": "input_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained Random Forest model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing the best parameters from Optuna.",
        "name": "best_params_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of splits for cross-validation.",
        "name": "n_splits",
        "required": true,
        "type": "string"
      },
      {
        "description": "Total number of points for balanced subset.",
        "name": "subset_size",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "seed",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of Optuna trials to run.",
        "name": "num_trials",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Objective function to optimize. Options are: accuracy, f1, precision, recall.",
        "name": "objective_function",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "random forest",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "optuna"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 534,
    "group": "cellcanvas",
    "name": "segment-tomogram-binary",
    "version": "0.1.2",
    "title": "Predict Binary Segmentations Using Models",
    "description": "A solution that predicts binary segmentations for each label using models created by an optimization solution, and saves them separately.",
    "date": "2024-08-11T10:17:16.171585",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use, e.g., denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature names to use, e.g., cellcanvas01,cellcanvas02.",
        "name": "feature_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the trained models.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output segmentation.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "prediction",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 535,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.7",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 536,
    "group": "copick",
    "name": "browse-copick-index",
    "version": "0.0.2",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using Panel.",
    "date": "2024-08-11T10:17:51.225417",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "panel",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 537,
    "group": "copick",
    "name": "bulk-evaluation",
    "version": "0.0.4",
    "title": "Compare All Picks from Different Users and Sessions",
    "description": "A solution that uses the compare-picks album solution to evaluate all user_id and session_id pairs listed in a CSV file, creating JSON output files for each pair in a specified directory and submitting jobs to Slurm.",
    "date": "2024-08-11T10:18:07.518210",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Directory to save the output JSON files.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file containing user_id and session_id pairs to process.",
        "name": "candidates_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "JSON string with weights for each particle type.",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick",
      "slurm"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 538,
    "group": "copick",
    "name": "cellcanvas-copick",
    "version": "0.0.8",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:22.547451",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 539,
    "group": "copick",
    "name": "cellcanvas-copick-linux",
    "version": "0.0.8",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:34.852019",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 540,
    "group": "copick",
    "name": "cellcanvas-copick-macos",
    "version": "0.0.8",
    "title": "Run CellCanvas with a copick project.",
    "description": "Run CellCanvas with a copick project",
    "date": "2024-08-11T10:18:48.508053",
    "args": [
      {
        "description": "Path to the copick project config file.",
        "name": "copick_config",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas team.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 541,
    "group": "copick",
    "name": "compare-picks",
    "version": "0.0.38",
    "title": "Compare Picks from Different Users and Sessions with F-beta Score",
    "description": "A solution that compares the picks from a reference user and session to a candidate user and session for all particle types, providing metrics like average distance, precision, recall, and F-beta score. Computes micro-averaged F-beta score across all runs if run_name is not provided.",
    "date": "2024-08-11T10:19:02.605749",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the reference picks.",
        "name": "reference_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the reference picks.",
        "name": "reference_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the candidate picks.",
        "name": "candidate_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the candidate picks.",
        "name": "candidate_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold multiplier for matching points (e.g., 1.5x the radius as default).",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      },
      {
        "description": "Beta value for the F-beta score.",
        "name": "beta",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of weights for each particle type (e.g., particle1=1,particle2=2).",
        "name": "weights",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "picks",
      "comparison",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 542,
    "group": "copick",
    "name": "copick_live",
    "version": "0.0.4",
    "title": "Run CoPick Live.",
    "description": "Run CoPick Live",
    "date": "2024-08-11T10:19:17.322093",
    "args": [
      {
        "description": "Path to the configuration file.",
        "name": "config_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CoPick Live team.",
        "url": "https://github.com/zhuowenzhao/copick_live"
      }
    ],
    "authors": [
      "Zhuowen Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "copick_live"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 543,
    "group": "copick",
    "name": "discover-picks",
    "version": "0.1.4",
    "title": "Classify and Match Embeddings to Known Particle Classes with Multithreading Across Multiple Directories",
    "description": "Uses multithreading to compare median embeddings from multiple Zarr datasets to known class medians and identifies matches based on a configurable distance threshold.",
    "date": "2024-08-11T10:19:33.547811",
    "args": [
      {
        "description": "Paths to the embedding Zarr directories separated by commas.",
        "name": "embedding_directories",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the CSV file with median embeddings and distances.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output file containing matches.",
        "name": "matches_output_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Distance threshold factor to consider a match.",
        "name": "distance_threshold",
        "required": true,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "embedding",
      "classification",
      "cryoet",
      "multithreading"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 544,
    "group": "copick",
    "name": "display-copick-index",
    "version": "0.0.9",
    "title": "Display Copick Project Index",
    "description": "A solution that opens a Copick project and displays the index using textual.",
    "date": "2024-08-11T10:19:58.243565",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "textual",
      "index"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 545,
    "group": "copick",
    "name": "export-to-hdf",
    "version": "0.0.4",
    "title": "Export Copick Runs to HDF5",
    "description": "A solution that exports multiple Copick runs' tomograms and picks into an HDF5 file.",
    "date": "2024-08-11T10:20:30.692182",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output HDF5 file.",
        "name": "output_hdf_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale tomogram and pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to export (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Filter picks by user ID.",
        "name": "user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Filter picks by session ID.",
        "name": "session_id",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data export",
      "zarr",
      "hdf5",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 546,
    "group": "copick",
    "name": "generate-cellcanvas-features",
    "version": "0.0.13",
    "title": "Batch Process Zarr Files for Pixel Embedding",
    "description": "Automatically process all Zarr files within a specified directory structure using a SwinUNETR model.",
    "date": "2024-08-11T10:20:44.327489",
    "args": [
      {
        "description": "Path to the copick directory containing the Zarr files to process.",
        "name": "copick_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model.",
        "name": "checkpoint_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "CellCanvas and Copick teams.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "batch processing",
      "zarr",
      "deep learning",
      "cryoet",
      "cellcanvas",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 547,
    "group": "copick",
    "name": "generate-skimage-features",
    "version": "0.1.18",
    "title": "Generate Multiscale Basic Features with Scikit-Image using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-11T10:20:56.314627",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 548,
    "group": "copick",
    "name": "get-median-embeddings",
    "version": "0.0.6",
    "title": "Analyze Median Embeddings for Each Object Type Across Multiple Runs",
    "description": "Generates a file containing the median embeddings for each object type based on the picks in multiple runs, filtered by user IDs if provided.",
    "date": "2024-08-11T10:21:15.646321",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of user IDs to filter picks by. If not provided, all picks will be processed.",
        "name": "user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output file.",
        "name": "output_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 549,
    "group": "copick",
    "name": "get-pick-embeddings",
    "version": "0.2.1",
    "title": "Analyze Picks and Corresponding Embeddings for a Single Run",
    "description": "Generates a DataFrame from picks and their corresponding embeddings for a single run and saves it.",
    "date": "2024-08-11T10:21:36.005738",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output dataframe.",
        "name": "dataframe_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 550,
    "group": "copick",
    "name": "grid-picks",
    "version": "0.0.4",
    "title": "Grid Picks from Tomogram",
    "description": "A solution that places a grid of picks based on the radius of each pickable object, parameterized by a multiple of the particle radius, using tomogram shape.",
    "date": "2024-08-11T10:21:49.907167",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Factor to multiply the particle radius by to determine grid spacing.",
        "name": "grid_spacing_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process. If not specified, process all runs.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "grid",
      "picks",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 551,
    "group": "copick",
    "name": "labeled-data-from-picks",
    "version": "0.1.7",
    "title": "Process Copick Runs and Save Features and Labels",
    "description": "A solution that processes all Copick runs and saves the resulting features and labels into a Zarr zip store.",
    "date": "2024-08-11T10:22:03.565253",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for the output Zarr zip store containing the features and labels.",
        "name": "output_zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "features",
      "labels",
      "dataframe"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 552,
    "group": "copick",
    "name": "napari-copick",
    "version": "0.0.2",
    "title": "Napari Copick Plugin Launcher",
    "description": "A solution that installs napari-copick and launches the CopickPlugin.",
    "date": "2024-08-11T10:22:16.901955",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "copick",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 553,
    "group": "copick",
    "name": "paint-from-picks",
    "version": "0.2.3",
    "title": "Paint Copick Picks into a Segmentation Layer",
    "description": "A solution that paints picks from a Copick project into a segmentation layer in Zarr.",
    "date": "2024-08-11T10:22:33.317725",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Factor to scale the particle radius for the ball radius.",
        "name": "ball_radius_factor",
        "required": true,
        "type": "float"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Comma-separated list of user IDs to include in the painting.",
        "name": "allowlist_user_ids",
        "required": false,
        "type": "string"
      },
      {
        "description": "Type of tomogram to use (e.g., denoised).",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "painting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 554,
    "group": "copick",
    "name": "pick-distance-from-embedding",
    "version": "0.0.6",
    "title": "Create Picks with Distance to Median Embedding",
    "description": "Creates a new set of picks for a new session ID, containing the same locations but including the distance to the median embedding in the 'score' attribute.",
    "date": "2024-08-11T10:22:46.250574",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "New session ID for the newly created picks.",
        "name": "new_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to extract embeddings for.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Radius for calculating median embeddings.",
        "name": "radius",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Path to the JSON file containing median embeddings.",
        "name": "median_embeddings_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "picks",
      "embedding",
      "cryoet"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 555,
    "group": "copick",
    "name": "picks-from-segmentation",
    "version": "0.0.22",
    "title": "Extract Centroids from Multilabel Segmentation",
    "description": "A solution that extracts centroids from a multilabel segmentation using Copick and saves them as candidate picks.",
    "date": "2024-08-11T10:22:57.646144",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory containing the multilabel segmentation.",
        "name": "segmentation_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 1000,
        "description": "Minimum size threshold for particles.",
        "name": "min_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 50000,
        "description": "Maximum size threshold for particles.",
        "name": "max_particle_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 9,
        "description": "Size for the maximum detection filter (default 9).",
        "name": "maxima_filter_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Comma-separated list of labels to process.",
        "name": "labels_to_process",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "centroids",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 556,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.12",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 557,
    "group": "copick",
    "name": "score-all-picks",
    "version": "0.0.14",
    "title": "Evaluate Picks Against Multilabel Segmentation",
    "description": "A solution that evaluates picks from a Copick project against a multilabel segmentation and computes metrics for each (user_id, session_id, object_name) pair for each run and across all runs.",
    "date": "2024-08-11T10:23:24.485822",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the painting segmentation.",
        "name": "painting_segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Offset for segmentation indices (default 0).",
        "name": "segmentation_idx_offset",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Directory to save output statistics.",
        "name": "output_stats_dir",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 558,
    "group": "copick",
    "name": "split-dataset",
    "version": "0.0.10",
    "title": "Split Dataset for Training and Testing",
    "description": "A solution that splits datasets into training and test sets, ensuring distributions are preserved.",
    "date": "2024-08-11T10:23:36.338310",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of split ratios for train, test1, test2, and test3.",
        "name": "ks_values",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output JSON file.",
        "name": "output_json_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID to filter picks.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID to filter picks.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kevin Zhao and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "dataset splitting",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 559,
    "group": "copick",
    "name": "voxel-counts-per-label",
    "version": "0.1.2",
    "title": "Voxel Counts per Label",
    "description": "A solution that counts the number of voxels per label in a segmentation and saves the results as a CSV and HTML page.",
    "date": "2024-08-11T10:23:48.244324",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the segmentation to process.",
        "name": "segmentation_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output path for the CSV file.",
        "name": "output_csv",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output path for the HTML file.",
        "name": "output_html",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "zarr",
      "segmentation",
      "voxels",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 560,
    "group": "album",
    "name": "server",
    "version": "0.0.2",
    "title": "FastAPI Album Server",
    "description": "A FastAPI server to manage Album solutions.",
    "date": "2024-08-11T10:24:05.389309",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 561,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.13",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 562,
    "group": "rank-analysis",
    "name": "compare-rankings",
    "version": "0.0.13",
    "title": "Compare Rankings from Different Runs",
    "description": "A solution that compares the rankings of candidates in the public and private test sets using various rank metrics.",
    "date": "2024-08-11T10:24:38.203404",
    "args": [
      {
        "description": "Directory containing the JSON files with results.",
        "name": "json_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the configuration JSON file with run names.",
        "name": "config_json",
        "required": true,
        "type": "string"
      },
      {
        "description": "Beta value for the f-beta score.",
        "name": "beta",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated string of weights for each particle type (e.g., type1=0.5,type2=1.0).",
        "name": "weights",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to save the output JSON file with the results.",
        "name": "output_json",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "data analysis",
      "rankings",
      "comparison"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 563,
    "group": "environments",
    "name": "copick-monai",
    "version": "0.0.3",
    "title": "An environment to support copick monai projects",
    "description": "An album solution for copick monai morphospaces projects .",
    "date": "2024-08-11T10:24:53.329535",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 564,
    "group": "environments",
    "name": "polnet",
    "version": "0.0.3",
    "title": "An environment to support polnet and copick",
    "description": "An album solution for copick polnet projects .",
    "date": "2024-08-11T10:25:05.212964",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 565,
    "group": "kephale",
    "name": "model-search-copick",
    "version": "0.0.4",
    "title": "Train 3D UNet for Segmentation with Copick Dataset",
    "description": "Train a 3D UNet network using the Copick dataset for segmentation.",
    "date": "2024-08-11T10:25:20.399827",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the UNet training",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 566,
    "group": "kephale",
    "name": "train-unet",
    "version": "0.0.11",
    "title": "Train UNet Model using MONAI with Multiple Runs and MLflow",
    "description": "Train a UNet model to predict segmentation masks using MONAI from multiple runs with MLflow tracking.",
    "date": "2024-08-11T10:25:59.727867",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names to process.",
        "name": "run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of segmentation labels to use.",
        "name": "seg_type",
        "required": true,
        "type": "string"
      },
      {
        "default": 100,
        "description": "Number of training epochs.",
        "name": "num_epochs",
        "required": false,
        "type": "integer"
      },
      {
        "default": 4,
        "description": "Batch size for training.",
        "name": "batch_size",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the optimizer.",
        "name": "learning_rate",
        "required": false,
        "type": "float"
      },
      {
        "description": "Name of the MLflow experiment.",
        "name": "experiment_name",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Enable debugging output.",
        "name": "debug",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "segmentation",
      "deep learning",
      "monai",
      "unet",
      "mlflow"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 567,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.10",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 568,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding_copick",
    "version": "0.0.4",
    "title": "Train SwinUNETR Pixel Embedding Network with Copick Dataset",
    "description": "Train the SwinUNETR pixel embedding network using the Copick dataset.",
    "date": "2024-09-13T11:48:27.578350",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi",
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 569,
    "group": "pixeltapestry",
    "name": "train_binary_swin_unetr_embedding_copick",
    "version": "0.0.2",
    "title": "Train Binary SwinUNETR Pixel Embedding Network with Copick Dataset",
    "description": "Train the Binary SwinUNETR pixel embedding network using the Copick dataset.",
    "date": "2024-08-11T10:26:52.392440",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Pixeltapestry team.",
        "url": "https://github.com/kephale/pixeltapestry"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "pixeltapestery"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 570,
    "group": "polnet",
    "name": "pdb-to-pns",
    "version": "0.0.2",
    "title": "Generate a PNS density image from PDB ID",
    "description": "Generate a Point Normal Surface (PNS) file from a PDB ID.",
    "date": "2024-08-11T10:27:13.085412",
    "args": [
      {
        "description": "PDB ID of the structure.",
        "name": "pdb_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output PNS file.",
        "name": "output_file",
        "required": true,
        "type": "string"
      },
      {
        "default": 10.0,
        "description": "Grid resolution for the PNS.",
        "name": "grid_resolution",
        "required": false,
        "type": "float"
      },
      {
        "default": 50.0,
        "description": "Grid spacing around the structure.",
        "name": "grid_spacing",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and copick teams",
        "url": "https://cellcanvas.org/"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "PDB",
      "grid",
      "surface",
      "structural biology",
      "pns"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 571,
    "group": "utils",
    "name": "mrc2omezarr",
    "version": "0.0.4",
    "title": "Convert a mrc to omezarr using mrc2omezarr",
    "description": "Convert a mrc to omezarr using mrc2omezarr.",
    "date": "2024-08-11T10:27:35.849625",
    "args": [
      {
        "description": "Path to the MRC file. Include the protocol if necessary (e.g., s3://).",
        "name": "mrc_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output Zarr file. Include the protocol if necessary (e.g., s3://).",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to read the MRC file in permissive mode.",
        "name": "permissive",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Whether to overwrite the output Zarr file.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "1,2,4",
        "description": "Scale factors for multiscale pyramid. Comma-separated list of integers.",
        "name": "scale_factors",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel size in Angstroms. Comma-separated list of floats or a single float. If not provided, it will be read from the MRC header.",
        "name": "voxel_size",
        "required": false,
        "type": "string"
      },
      {
        "description": "Whether the data is an image stack (determined from MRC-header by default).",
        "name": "is_image_stack",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 256,
        "description": "Chunk size for the Zarr file.",
        "name": "chunk_size",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Path to a JSON file containing additional arguments to pass to the fsspec-filesystem.",
        "name": "filesystem_args",
        "required": false,
        "type": "string"
      },
      {
        "default": "local_mean",
        "description": "Method to downscale the data. Options: local_mean, downsample.",
        "name": "pyramid_method",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Utz Ermel.",
        "url": "https://github.com/uermel/mrc2omezarr"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "mrc",
      "ome-zarr",
      "zarr"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 572,
    "group": "utils",
    "name": "pdb-to-pns",
    "version": "0.0.2",
    "title": "Generate a PNS density image from PDB ID",
    "description": "Generate a Point Normal Surface (PNS) file from a PDB ID.",
    "date": "2024-08-11T10:27:57.186934",
    "args": [
      {
        "description": "PDB ID of the structure.",
        "name": "pdb_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the output PNS file.",
        "name": "output_file",
        "required": true,
        "type": "string"
      },
      {
        "default": 10.0,
        "description": "Grid resolution for the PNS.",
        "name": "grid_resolution",
        "required": false,
        "type": "float"
      },
      {
        "default": 50.0,
        "description": "Grid spacing around the structure.",
        "name": "grid_spacing",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and copick teams",
        "url": "https://cellcanvas.org/"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "PDB",
      "grid",
      "surface",
      "structural biology",
      "pns"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 573,
    "group": "ux_evaluation_winter2024",
    "name": "python-nographics",
    "version": "0.0.5",
    "title": "Parent environment for supporting the Winter 2024 UX Evaluation.",
    "description": "Parent environment for supporting the Winter 2024 UX Evaluation",
    "date": "2024-08-11T10:28:18.948155",
    "args": [],
    "citation": [
      {
        "text": "Kyle. Also check out TeamTomo",
        "url": ""
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 574,
    "group": "ux_evaluation_winter2024",
    "name": "run_evaluation",
    "version": "0.0.6",
    "title": "Run UX Evaluation.",
    "description": "Run the UX evaluation itself",
    "date": "2024-08-11T10:28:32.557897",
    "args": [
      {
        "default": "cellcanvas_crop_007",
        "description": "Name of dataset for evaluation: cellcanvas_crop_007, cellcanvas_crop_009, or cellcanvas_crop_010",
        "name": "dataset_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "cellcanvas"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 575,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding",
    "version": "0.0.5",
    "title": "Train SwinUnetr Pixel Embedding Network",
    "description": "Train the SwinUnetr pixel embedding network using the provided script and dataset.",
    "date": "2024-08-11T10:28:56.345220",
    "args": [
      {
        "description": "Learning rate.",
        "name": "lr",
        "type": "float"
      },
      {
        "description": "Path to save logs and checkpoints.",
        "name": "logdir_path",
        "type": "string"
      },
      {
        "description": "Batch size for training.",
        "name": "batch_size",
        "type": "integer"
      },
      {
        "description": "Patch threshold.",
        "name": "patch_threshold",
        "type": "float"
      },
      {
        "description": "Loss temperature.",
        "name": "loss_temperature",
        "type": "float"
      },
      {
        "description": "Path to pretrained weights.",
        "name": "pretrained_weights_path",
        "type": "string"
      },
      {
        "description": "Maximum number of epochs for training.",
        "name": "max_epochs",
        "type": "integer"
      },
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for training data.",
        "name": "train_run_names",
        "type": "string"
      },
      {
        "description": "Comma-separated list of Copick run names for validation data.",
        "name": "val_run_names",
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "type": "string"
      },
      {
        "description": "Session ID for accessing Copick data.",
        "name": "session_id",
        "type": "string"
      },
      {
        "description": "User ID for accessing Copick data.",
        "name": "user_id",
        "type": "string"
      },
      {
        "description": "Name of the segmentation to use from Copick.",
        "name": "segmentation_name",
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 576,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.6",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 577,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.7",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 578,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.1.13",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 579,
    "group": "cellcanvas",
    "name": "napari-cellcanvas",
    "version": "0.0.5",
    "title": "napari-CellCanvas",
    "description": "A solution that launches napari-cellcanvas with optional config fetching.",
    "date": "2024-08-13T11:22:16.420429",
    "args": [
      {
        "default": "/Users/kharrington/Data/copick/cellcanvas_server/local_sshOverlay_localStatic.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "localhost",
        "description": "Hostname for the server.",
        "name": "hostname",
        "required": true,
        "type": "string"
      },
      {
        "default": 8080,
        "description": "Port number for the server.",
        "name": "port",
        "required": true,
        "type": "integer"
      },
      {
        "default": false,
        "description": "Whether to fetch the config from the server.",
        "name": "fetch_config",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the overlay path should be remote (SSH).",
        "name": "overlay_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Set to true if the static path should be remote (SSH).",
        "name": "static_remote",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "The local path for the overlay root if not remote.",
        "name": "overlay_path",
        "required": false,
        "type": "string"
      },
      {
        "description": "The local path for the static root if not remote.",
        "name": "static_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "napari",
      "cellcanvas",
      "plugin",
      "visualization"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 580,
    "group": "copick",
    "name": "train-model-xgboost-copick",
    "version": "0.0.1",
    "title": "Train XGBoost on Copick Data with Cross-Validation",
    "description": "A solution that processes Copick runs, filters runs with only one label, and trains an XGBoost model with 10-fold cross-validation.",
    "date": "2024-08-13T14:45:18.893752",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of names for the painting segmentations. Rightmost segmentation has highest precedence.",
        "name": "painting_segmentation_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the segmentation.",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for segmentation creation.",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram, e.g. denoised.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of feature types to use for each tomogram, e.g. cellcanvas01,cellcanvas02.",
        "name": "feature_types",
        "required": true,
        "type": "string"
      },
      {
        "description": "Comma-separated list of run names to process. If not provided, all runs will be processed.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": 0.3,
        "description": "Step size shrinkage used in update to prevents overfitting.",
        "name": "eta",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree.",
        "name": "gamma",
        "required": false,
        "type": "float"
      },
      {
        "default": 6,
        "description": "The maximum depth of the trees.",
        "name": "max_depth",
        "required": false,
        "type": "integer"
      },
      {
        "default": 1.0,
        "description": "Minimum sum of instance weight needed in a child.",
        "name": "min_child_weight",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "Maximum delta step we allow each leaf output to be.",
        "name": "max_delta_step",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of the training instances.",
        "name": "subsample",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "Subsample ratio of columns when constructing each tree.",
        "name": "colsample_bytree",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.0,
        "description": "L2 regularization term on weights.",
        "name": "reg_lambda",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.0,
        "description": "L1 regularization term on weights.",
        "name": "reg_alpha",
        "required": false,
        "type": "float"
      },
      {
        "default": 256,
        "description": "Maximum number of discrete bins to bucket continuous features.",
        "name": "max_bin",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Class weights for the XGBoost model as a comma-separated list.",
        "name": "class_weights",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path for the output joblib file containing the trained XGBoost model.",
        "name": "output_model_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "cross-validation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 581,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.8",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 582,
    "group": "copick",
    "name": "generate-torch-basic-features",
    "version": "0.0.1",
    "title": "Generate Multiscale Basic Features with Torch using Copick API (Chunked, Corrected)",
    "description": "Compute multiscale basic features of a tomogram from a Copick run in chunks and save them using Copick's API.",
    "date": "2024-08-13T15:39:28.095763",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the feature type to be saved.",
        "name": "feature_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Include intensity features",
        "name": "intensity",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include edge features",
        "name": "edges",
        "required": false,
        "type": "boolean"
      },
      {
        "default": true,
        "description": "Include texture features",
        "name": "texture",
        "required": false,
        "type": "boolean"
      },
      {
        "default": 0.5,
        "description": "Minimum sigma for Gaussian blurring",
        "name": "sigma_min",
        "required": false,
        "type": "float"
      },
      {
        "default": 16.0,
        "description": "Maximum sigma for Gaussian blurring",
        "name": "sigma_max",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "feature extraction",
      "image processing",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 583,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.9",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 584,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.10",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 585,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.11",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 586,
    "group": "cellcanvas",
    "name": "server",
    "version": "0.0.12",
    "title": "FastAPI CellCanvas Server",
    "description": "Backend for CellCanvas with Copick Config Support.",
    "date": "2024-08-13T17:10:15.066111",
    "args": [
      {
        "default": "/path/to/copick/config.json",
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to the JSON file for storing model listings. If not provided, model listings will not be persisted.",
        "name": "models_json_path",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "fastapi",
      "album",
      "server",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 587,
    "group": "cellcanvas",
    "name": "generate-pixel-embedding",
    "version": "0.1.8",
    "title": "Predict Tomogram Embeddings with SwinUNETR using Copick API",
    "description": "Apply a SwinUNETR model to a tomogram fetched using the Copick API to produce embeddings, and save them in a Zarr.",
    "date": "2024-08-13T15:10:07.510854",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Copick run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to be used.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram to process.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the checkpoint file of the trained SwinUNETR model",
        "name": "checkpointpath",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding to use as the feature name in Copick",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "prediction",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 588,
    "group": "morphospaces",
    "name": "train_swin_unetr_pixel_embedding_copick",
    "version": "0.0.5",
    "title": "Train SwinUNETR Pixel Embedding Network with Copick Dataset",
    "description": "Train the SwinUNETR pixel embedding network using the Copick dataset.",
    "date": "2024-09-13T11:48:27.578350",
    "args": [
      {
        "description": "Pretrained weights path",
        "name": "pretrained_weights_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for training",
        "name": "train_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Names of the runs in the Copick project for validation",
        "name": "val_run_names",
        "required": true,
        "type": "string"
      },
      {
        "description": "Tomogram type in the Copick project",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the Copick project",
        "name": "user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the Copick project",
        "name": "session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Segmentation type in the Copick project",
        "name": "segmentation_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing for the Copick project",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "default": 0.0001,
        "description": "Learning rate for the supervised contrastive learning",
        "name": "lr",
        "required": false,
        "type": "float"
      },
      {
        "default": "checkpoints",
        "description": "Output directory name in the current working directory. Default is checkpoints",
        "name": "logdir",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Morphospaces team.",
        "url": "https://github.com/morphometrics/morphospaces"
      }
    ],
    "authors": [
      "Kevin Yamauchi",
      "Kyle Harrington",
      "Zhuowen Zhao"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "segmentation",
      "cryoet",
      "Python",
      "morphospaces"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 589,
    "group": "copick",
    "name": "submit-album-job-array",
    "version": "0.0.14",
    "title": "Submit Album Job Array",
    "description": "Submit another album solution to Slurm as a job array by using the runs in a Copick project.",
    "date": "2024-10-03T10:23:08.708711",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the album solution to run.",
        "name": "album_solution_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the album executable.",
        "name": "album_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Slurm partition to use.",
        "name": "slurm_partition",
        "required": false,
        "type": "string"
      },
      {
        "default": "24:00:00",
        "description": "Time limit for the Slurm job (e.g., 01:00:00 for 1 hour).",
        "name": "slurm_time",
        "required": false,
        "type": "string"
      },
      {
        "default": "128G",
        "description": "Memory limit for the Slurm job (e.g., 125G for 125 GB).",
        "name": "slurm_memory",
        "required": false,
        "type": "string"
      },
      {
        "default": 24,
        "description": "Number of CPUs per Slurm task.",
        "name": "slurm_cpus_per_task",
        "required": false,
        "type": "integer"
      },
      {
        "default": 0,
        "description": "Number of GPUs per Slurm task.",
        "name": "slurm_gpus",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Slurm module commands to load necessary modules (e.g., module load cuda/11.8.0_520.61.05\\nmodule load cudnn/8.8.1.3_cuda11).",
        "name": "slurm_module_commands",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Additional arguments to pass to the album solution.",
        "name": "extra_args",
        "required": false,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to submit the job to Slurm or just print the submission command and script.",
        "name": "submit_job",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "slurm",
      "job array",
      "album",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 590,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.2.0",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 591,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.2.1",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 592,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.2.2",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 593,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.2.3",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 594,
    "group": "copick",
    "name": "project_from_dataportal",
    "version": "0.2.4",
    "title": "Fetch Data from CryoET Data Portal and Integrate with Copick",
    "description": "Fetches tomograms, tilt series, annotations, segmentations, and metadata from cryoet_data_portal and integrates them into the specified Copick project.",
    "date": "2024-10-03T13:37:17.348380",
    "args": [
      {
        "description": "Dataset ID to process.",
        "name": "dataset_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Optional voxel spacing to filter tomograms.",
        "name": "voxel_spacing",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the overlay root directory.",
        "name": "overlay_root",
        "required": false,
        "type": "string"
      },
      {
        "description": "Path to the static root directory.",
        "name": "static_root",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Cellcanvas and Copick teams",
        "url": "https://cellcanvas.org"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "zarr",
      "deep learning",
      "tomography",
      "cryoET"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 595,
    "group": "cellcanvas",
    "name": "mock-annotation",
    "version": "0.0.1",
    "title": "Mock Annotation and XGBoost Training on Copick Data",
    "description": "A solution that creates mock annotations based on multilabel segmentation, trains XGBoost models in steps, and generates predictions.",
    "date": "2024-10-04T14:37:07.881532",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the input segmentation.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of annotation steps to perform.",
        "name": "num_annotation_steps",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save trained models.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 17171,
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "copick",
      "mock annotation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 596,
    "group": "cellcanvas",
    "name": "mock-annotation",
    "version": "0.0.2",
    "title": "Mock Annotation and XGBoost Training on Copick Data",
    "description": "A solution that creates mock annotations based on multilabel segmentation, trains XGBoost models in steps, and generates predictions.",
    "date": "2024-10-04T14:37:07.881532",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the input segmentation.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of annotation steps to perform.",
        "name": "num_annotation_steps",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save trained models.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 17171,
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "copick",
      "mock annotation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 597,
    "group": "cellcanvas",
    "name": "mock-annotation",
    "version": "0.0.3",
    "title": "Mock Annotation and XGBoost Training on Copick Data",
    "description": "A solution that creates mock annotations based on multilabel segmentation, trains XGBoost models in steps, and generates predictions.",
    "date": "2024-10-04T14:37:07.881532",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the input segmentation.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of annotation steps to perform.",
        "name": "num_annotation_steps",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save trained models.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 17171,
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "copick",
      "mock annotation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 598,
    "group": "cellcanvas",
    "name": "mock-annotation",
    "version": "0.0.4",
    "title": "Mock Annotation and XGBoost Training on Copick Data",
    "description": "A solution that creates mock annotations based on multilabel segmentation, trains XGBoost models in steps, and generates predictions.",
    "date": "2024-10-04T14:37:07.881532",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the input segmentation.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of annotation steps to perform.",
        "name": "num_annotation_steps",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save trained models.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 17171,
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "copick",
      "mock annotation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 599,
    "group": "cellcanvas",
    "name": "mock-annotation",
    "version": "0.0.5",
    "title": "Mock Annotation and XGBoost Training on Copick Data",
    "description": "A solution that creates mock annotations based on multilabel segmentation, trains XGBoost models in steps, and generates predictions.",
    "date": "2024-10-04T14:37:07.881532",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the input segmentation.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of annotation steps to perform.",
        "name": "num_annotation_steps",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save trained models.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 17171,
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "copick",
      "mock annotation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 600,
    "group": "cellcanvas",
    "name": "mock-annotation",
    "version": "0.0.6",
    "title": "Mock Annotation and XGBoost Training on Copick Data",
    "description": "A solution that creates mock annotations based on multilabel segmentation, trains XGBoost models in steps, and generates predictions.",
    "date": "2024-10-04T14:37:07.881532",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for the input segmentation.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Number of annotation steps to perform.",
        "name": "num_annotation_steps",
        "required": true,
        "type": "integer"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save trained models.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "default": 17171,
        "description": "Random seed for reproducibility.",
        "name": "random_seed",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "training",
      "copick",
      "mock annotation"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 601,
    "group": "cellcanvas",
    "name": "mock-annotation-evaluation",
    "version": "0.0.1",
    "title": "Model Evaluation on Copick Data",
    "description": "Evaluates segmentation models from the mock-annotation solution on Copick data, generating metrics like IoU and F1, and saves the predicted segmentation into the Copick project.",
    "date": "2024-10-08T10:22:50.747599",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory of trained model files.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save evaluation results.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the output predicted segmentation.",
        "name": "output_user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the output predicted segmentation.",
        "name": "output_label_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 602,
    "group": "cellcanvas",
    "name": "mock-annotation-evaluation",
    "version": "0.0.2",
    "title": "Model Evaluation on Copick Data",
    "description": "Evaluates segmentation models from the mock-annotation solution on Copick data, generating metrics like IoU and F1, and saves the predicted segmentation into the Copick project.",
    "date": "2024-10-08T10:22:50.747599",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory of trained model files.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save evaluation results.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the output predicted segmentation.",
        "name": "output_user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the output predicted segmentation.",
        "name": "output_label_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "cellcanvas",
    "catalog_url": "https://github.com/cellcanvas/album-catalog.git",
    "solution_id": 603,
    "group": "cellcanvas",
    "name": "mock-annotation-evaluation",
    "version": "0.0.3",
    "title": "Model Evaluation on Copick Data",
    "description": "Evaluates segmentation models from the mock-annotation solution on Copick data, generating metrics like IoU and F1, and saves the predicted segmentation into the Copick project.",
    "date": "2024-10-08T10:22:50.747599",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing used to scale pick locations.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Tomogram type to use for each tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the embedding features to use.",
        "name": "embedding_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the input segmentation.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input label segmentation.",
        "name": "input_label_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process.",
        "name": "run_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory of trained model files.",
        "name": "model_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory to save evaluation results.",
        "name": "output_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "User ID for the output predicted segmentation.",
        "name": "output_user_id",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the output predicted segmentation.",
        "name": "output_label_name",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "xgboost",
      "machine learning",
      "segmentation",
      "evaluation",
      "copick"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 1,
    "group": "copick",
    "name": "fit_plane",
    "version": "0.1.0",
    "title": "Fit Plane",
    "description": "fit a plane to a set of copick points.",
    "date": "2024-08-12T11:23:42.817194",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 2,
    "group": "copick",
    "name": "fit_plane",
    "version": "0.3.0",
    "title": "Fit Plane",
    "description": "fit a plane to a set of copick points.",
    "date": "2024-08-12T11:23:42.817194",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 3,
    "group": "copick",
    "name": "fit_sample",
    "version": "0.2.0",
    "title": "Fit Sample Volume",
    "description": "fit a mesh describing the sample from two sets of points defining upper and lower boundary.",
    "date": "2024-08-12T11:24:02.008689",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 5,
    "group": "copick",
    "name": "fit_sample",
    "version": "0.3.0",
    "title": "Fit Sample Volume",
    "description": "fit a mesh describing the sample from two sets of points defining upper and lower boundary.",
    "date": "2024-08-12T11:24:02.008689",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 6,
    "group": "copick",
    "name": "create_rec_limits",
    "version": "0.3.0",
    "title": "Create Reconstruction Limits",
    "description": "Create a mesh defining the valid reconstructed area.",
    "date": "2024-08-12T11:23:17.575692",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Angle of the plane.",
        "name": "angle",
        "required": true,
        "type": "float"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 7,
    "group": "copick",
    "name": "fit_plane",
    "version": "0.4.0",
    "title": "Fit Plane",
    "description": "fit a plane to a set of copick points.",
    "date": "2024-08-12T11:23:42.817194",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 8,
    "group": "copick",
    "name": "fit_sample",
    "version": "0.4.0",
    "title": "Fit Sample Volume",
    "description": "fit a mesh describing the sample from two sets of points defining upper and lower boundary.",
    "date": "2024-08-12T11:24:02.008689",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 9,
    "group": "copick",
    "name": "intersect_mesh",
    "version": "0.3.0",
    "title": "Intersect two meshes",
    "description": "Compute the intersection of two meshes.",
    "date": "2024-08-12T11:24:59.635344",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the first object.",
        "name": "object_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the first user.",
        "name": "user_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the first session.",
        "name": "session_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second object.",
        "name": "object_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second user.",
        "name": "user_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the second session.",
        "name": "session_b",
        "required": true,
        "type": "string"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 10,
    "group": "copick",
    "name": "mesh_to_seg",
    "version": "0.5.0",
    "title": "Convert Mesh to Segmentation",
    "description": "Convert a watertight mesh to a dense voxel segmentation.",
    "date": "2024-08-12T11:25:15.394330",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "from-mesh",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 11,
    "group": "copick",
    "name": "sample_mesh",
    "version": "0.3.0",
    "title": "Sample points in/on/outside a mesh.",
    "description": "Sample random points in/on/outside a mesh.",
    "date": "2024-08-12T11:25:32.941931",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": 500,
        "description": "Approx. number of points on the mesh surface.",
        "name": "num_surf",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Approx. number of points inside the mesh.",
        "name": "num_internal",
        "required": false,
        "type": "integer"
      },
      {
        "default": 100,
        "description": "Approx. number of random points outside the mesh (negative examples).",
        "name": "num_random",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Minimum distance (in angstrom) between points.",
        "name": "min_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 32,
        "description": "Minimum distance (in voxels) from the volume bounds.",
        "name": "edge_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Random seed.",
        "name": "seed",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "sampled",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 12,
    "group": "copick",
    "name": "create_rec_limits",
    "version": "0.4.0",
    "title": "Create Reconstruction Limits",
    "description": "Create a mesh defining the valid reconstructed area.",
    "date": "2024-08-12T11:23:17.575692",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Angle of the plane.",
        "name": "angle",
        "required": true,
        "type": "float"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 13,
    "group": "copick",
    "name": "fit_plane",
    "version": "0.5.0",
    "title": "Fit Plane",
    "description": "fit a plane to a set of copick points.",
    "date": "2024-08-12T11:23:42.817194",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 14,
    "group": "copick",
    "name": "fit_sample",
    "version": "0.6.0",
    "title": "Fit Sample Volume",
    "description": "fit a mesh describing the sample from two sets of points defining upper and lower boundary.",
    "date": "2024-08-12T11:24:02.008689",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 15,
    "group": "copick",
    "name": "intersect_mesh",
    "version": "0.4.0",
    "title": "Intersect two meshes",
    "description": "Compute the intersection of two meshes.",
    "date": "2024-08-12T11:24:59.635344",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the first object.",
        "name": "object_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the first user.",
        "name": "user_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the first session.",
        "name": "session_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second object.",
        "name": "object_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second user.",
        "name": "user_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the second session.",
        "name": "session_b",
        "required": true,
        "type": "string"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 16,
    "group": "copick",
    "name": "mesh_to_seg",
    "version": "0.6.0",
    "title": "Convert Mesh to Segmentation",
    "description": "Convert a watertight mesh to a dense voxel segmentation.",
    "date": "2024-08-12T11:25:15.394330",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "from-mesh",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 17,
    "group": "copick",
    "name": "sample_mesh",
    "version": "0.4.0",
    "title": "Sample points in/on/outside a mesh.",
    "description": "Sample random points in/on/outside a mesh.",
    "date": "2024-08-12T11:25:32.941931",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": 500,
        "description": "Approx. number of points on the mesh surface.",
        "name": "num_surf",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Approx. number of points inside the mesh.",
        "name": "num_internal",
        "required": false,
        "type": "integer"
      },
      {
        "default": 100,
        "description": "Approx. number of random points outside the mesh (negative examples).",
        "name": "num_random",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Minimum distance (in angstrom) between points.",
        "name": "min_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 32,
        "description": "Minimum distance (in voxels) from the volume bounds.",
        "name": "edge_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Random seed.",
        "name": "seed",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "sampled",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 18,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.3.0",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 19,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.4.0",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 20,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.5.0",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 21,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.6.0",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 22,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.7.0",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 23,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.1.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 24,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.2.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 25,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.3.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 26,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.4.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 27,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.5.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 28,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.6.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 29,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.7.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 30,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.8.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 31,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.9.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 32,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.10.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 33,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.11.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 34,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.12.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 35,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.13.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 36,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.1.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 37,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.2.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 38,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.3.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 39,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.4.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 40,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.5.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 41,
    "group": "copick",
    "name": "create_rec_limits",
    "version": "0.5.0",
    "title": "Create Reconstruction Limits",
    "description": "Create a mesh defining the valid reconstructed area.",
    "date": "2024-08-12T11:23:17.575692",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Angle of the plane.",
        "name": "angle",
        "required": true,
        "type": "float"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 42,
    "group": "copick",
    "name": "fit_plane",
    "version": "0.6.0",
    "title": "Fit Plane",
    "description": "fit a plane to a set of copick points.",
    "date": "2024-08-12T11:23:42.817194",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 43,
    "group": "copick",
    "name": "fit_sample",
    "version": "0.7.0",
    "title": "Fit Sample Volume",
    "description": "fit a mesh describing the sample from two sets of points defining upper and lower boundary.",
    "date": "2024-08-12T11:24:02.008689",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 44,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.9.0",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 45,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.6.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 46,
    "group": "copick",
    "name": "intersect_mesh",
    "version": "0.5.0",
    "title": "Intersect two meshes",
    "description": "Compute the intersection of two meshes.",
    "date": "2024-08-12T11:24:59.635344",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the first object.",
        "name": "object_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the first user.",
        "name": "user_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the first session.",
        "name": "session_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second object.",
        "name": "object_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second user.",
        "name": "user_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the second session.",
        "name": "session_b",
        "required": true,
        "type": "string"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 47,
    "group": "copick",
    "name": "mesh_to_seg",
    "version": "0.7.0",
    "title": "Convert Mesh to Segmentation",
    "description": "Convert a watertight mesh to a dense voxel segmentation.",
    "date": "2024-08-12T11:25:15.394330",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "from-mesh",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 48,
    "group": "copick",
    "name": "sample_mesh",
    "version": "0.5.0",
    "title": "Sample points in/on/outside a mesh.",
    "description": "Sample random points in/on/outside a mesh.",
    "date": "2024-08-12T11:25:32.941931",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": 500,
        "description": "Approx. number of points on the mesh surface.",
        "name": "num_surf",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Approx. number of points inside the mesh.",
        "name": "num_internal",
        "required": false,
        "type": "integer"
      },
      {
        "default": 100,
        "description": "Approx. number of random points outside the mesh (negative examples).",
        "name": "num_random",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Minimum distance (in angstrom) between points.",
        "name": "min_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 32,
        "description": "Minimum distance (in voxels) from the volume bounds.",
        "name": "edge_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Random seed.",
        "name": "seed",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "sampled",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 49,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.14.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 50,
    "group": "copick",
    "name": "create_empty_picks",
    "version": "0.1.0",
    "title": "Create empty picks.",
    "description": "Create empty picks inside a copick project.",
    "date": "2024-08-12T11:20:16.223156",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to overwrite existing picks.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "picks",
      "creation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 51,
    "group": "copick",
    "name": "create_empty_picks",
    "version": "0.2.0",
    "title": "Create empty picks.",
    "description": "Create empty picks inside a copick project.",
    "date": "2024-08-12T11:20:16.223156",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to overwrite existing picks.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "picks",
      "creation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 52,
    "group": "copick",
    "name": "create_empty_picks",
    "version": "0.3.0",
    "title": "Create empty picks.",
    "description": "Create empty picks inside a copick project.",
    "date": "2024-08-12T11:20:16.223156",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to overwrite existing picks.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "picks",
      "creation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 53,
    "group": "visualization",
    "name": "napari-copick",
    "version": "0.0.1",
    "title": "Run napari-copick.",
    "description": "Run the napari-copick",
    "date": "2024-08-08T15:48:33.200123",
    "args": [
      {
        "description": "Path to the copick config file",
        "name": "config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "copick team.",
        "url": "https://copick.github.io/copick"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "copick"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 54,
    "group": "visualization",
    "name": "napari-copick",
    "version": "0.0.2",
    "title": "Run napari-copick.",
    "description": "Run the napari-copick",
    "date": "2024-08-08T15:48:33.200123",
    "args": [
      {
        "description": "Path to the copick config file",
        "name": "config_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "copick team.",
        "url": "https://copick.github.io/copick"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python",
      "napari",
      "copick"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 55,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.15.0",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 56,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.7.0",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 57,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.14.1",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 58,
    "group": "copick",
    "name": "create_empty_picks",
    "version": "0.3.1",
    "title": "Create empty picks.",
    "description": "Create empty picks inside a copick project.",
    "date": "2024-08-12T11:20:16.223156",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": true,
        "type": "string"
      },
      {
        "default": false,
        "description": "Whether to overwrite existing picks.",
        "name": "overwrite",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "picks",
      "creation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 59,
    "group": "copick",
    "name": "create_rec_limits",
    "version": "0.5.1",
    "title": "Create Reconstruction Limits",
    "description": "Create a mesh defining the valid reconstructed area.",
    "date": "2024-08-12T11:23:17.575692",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Angle of the plane.",
        "name": "angle",
        "required": true,
        "type": "float"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 60,
    "group": "copick",
    "name": "fit_plane",
    "version": "0.6.1",
    "title": "Fit Plane",
    "description": "fit a plane to a set of copick points.",
    "date": "2024-08-12T11:23:42.817194",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 61,
    "group": "copick",
    "name": "fit_sample",
    "version": "0.7.1",
    "title": "Fit Sample Volume",
    "description": "fit a mesh describing the sample from two sets of points defining upper and lower boundary.",
    "date": "2024-08-12T11:24:02.008689",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "5,5",
        "description": "Resolution of the grid (2 comma-separated ints).",
        "name": "grid_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 62,
    "group": "copick",
    "name": "fit_sample_seg",
    "version": "0.9.1",
    "title": "Fit Sample Volume from segmentation",
    "description": "fit a mesh describing the sample from a binary segmentation.",
    "date": "2024-08-12T11:24:22.949479",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "default": "top-layer",
        "description": "Name of the object defining top layer.",
        "name": "top_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "bottom-layer",
        "description": "Name of the object defining bottom layer.",
        "name": "bottom_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "segmentation",
        "description": "Name of the object defining bottom layer.",
        "name": "seg_name",
        "required": false,
        "type": "string"
      },
      {
        "default": "valid-sample",
        "description": "Name of the label defining the sample.",
        "name": "seg_label_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": "50,50",
        "description": "Resolution of the fit (2 comma-separated ints).",
        "name": "fit_resolution",
        "required": false,
        "type": "string"
      },
      {
        "default": "sample",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 63,
    "group": "copick",
    "name": "import_segmentations",
    "version": "0.7.1",
    "title": "Import segmentations.",
    "description": "Import segmentations into a copick project.",
    "date": "2024-08-12T11:24:41.641385",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the segmentation masks.",
        "name": "mask_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel size of the segmentation masks.",
        "name": "voxel_size",
        "required": true,
        "type": "float"
      },
      {
        "description": "Format string for the mask names. Use {run_name} as placeholder for the run name.",
        "name": "name_format",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      },
      {
        "default": "segmentation",
        "description": "Name of the output pickable object.",
        "name": "out_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "seg",
        "description": "User/Tool name for output points.",
        "name": "out_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Output session, indicating this set was generated by a tool.",
        "name": "out_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 64,
    "group": "copick",
    "name": "intersect_mesh",
    "version": "0.5.1",
    "title": "Intersect two meshes",
    "description": "Compute the intersection of two meshes.",
    "date": "2024-08-12T11:24:59.635344",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Name of the first object.",
        "name": "object_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the first user.",
        "name": "user_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the first session.",
        "name": "session_a",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second object.",
        "name": "object_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the second user.",
        "name": "user_b",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the second session.",
        "name": "session_b",
        "required": true,
        "type": "string"
      },
      {
        "default": "reconstruction",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "fit",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 65,
    "group": "copick",
    "name": "mesh_to_seg",
    "version": "0.7.1",
    "title": "Convert Mesh to Segmentation",
    "description": "Convert a watertight mesh to a dense voxel segmentation.",
    "date": "2024-08-12T11:25:15.394330",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "from-mesh",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 66,
    "group": "copick",
    "name": "sample_mesh",
    "version": "0.5.1",
    "title": "Sample points in/on/outside a mesh.",
    "description": "Sample random points in/on/outside a mesh.",
    "date": "2024-08-12T11:25:32.941931",
    "args": [
      {
        "description": "Path to the Copick configuration JSON file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of run names.",
        "name": "run_names",
        "required": false,
        "type": "string"
      },
      {
        "description": "Voxel spacing.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input object.",
        "name": "input_object",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the input user.",
        "name": "input_user",
        "required": true,
        "type": "string"
      },
      {
        "description": "ID of the input session.",
        "name": "input_session",
        "required": true,
        "type": "string"
      },
      {
        "default": 500,
        "description": "Approx. number of points on the mesh surface.",
        "name": "num_surf",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Approx. number of points inside the mesh.",
        "name": "num_internal",
        "required": false,
        "type": "integer"
      },
      {
        "default": 100,
        "description": "Approx. number of random points outside the mesh (negative examples).",
        "name": "num_random",
        "required": false,
        "type": "integer"
      },
      {
        "default": 500,
        "description": "Minimum distance (in angstrom) between points.",
        "name": "min_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 32,
        "description": "Minimum distance (in voxels) from the volume bounds.",
        "name": "edge_dist",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Random seed.",
        "name": "seed",
        "required": false,
        "type": "integer"
      },
      {
        "default": "",
        "description": "Name of the output object.",
        "name": "output_object",
        "required": false,
        "type": "string"
      },
      {
        "default": "sampled",
        "description": "Name of the output user.",
        "name": "output_user",
        "required": false,
        "type": "string"
      },
      {
        "default": "0",
        "description": "Name of the output session.",
        "name": "output_session",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "plane",
      "fitting",
      "surface",
      "segmentation"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 67,
    "group": "copick",
    "name": "setup_local_project",
    "version": "0.15.1",
    "title": "Set up a copick project.",
    "description": "Create a copick project. Optionally import tomograms.",
    "date": "2024-08-12T11:25:55.203097",
    "args": [
      {
        "description": "Path to the Copick project root. Write access is expected for both overlay and static root.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path to the directory containing the tomograms.",
        "name": "tomo_dir",
        "required": true,
        "type": "string"
      },
      {
        "description": "Type of tomogram.",
        "name": "tomo_type",
        "required": true,
        "type": "string"
      },
      {
        "default": true,
        "description": "Whether to write the segmentation as int8.",
        "name": "as_int8",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [],
    "authors": [
      "Utz H. Ermel"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "setup",
      "tomogram",
      "import"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 68,
    "group": "polnet",
    "name": "pdb-to-pns",
    "version": "0.1.0",
    "title": "Generate Polnet PNS file from PDB",
    "description": "This solution downloads PDBs and uses Polnet to convert into MRCs, and simulation-compatible textfile.",
    "date": "2024-10-03T09:50:35.807781",
    "args": [
      {
        "description": "PDB ID for the Macromolecule to Model",
        "name": "pdb_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Protein for the Associated PDB ID",
        "name": "protein_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Downloaded PDB File",
        "name": "pdb_write_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Converted PDB file to MRC",
        "name": "mrc_write_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Converted MRC file for Polnet",
        "name": "polnet_write_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Voxel size per \u00c5ngstr\u00f6m, scale of the tomogram resolution",
        "name": "voxel_size",
        "required": false,
        "type": "float"
      },
      {
        "default": 30,
        "description": "Tomogram resolution in \u00c5ngstr\u00f6ms.",
        "name": "resolution",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Isocontour",
        "name": "mmer_iso",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.1,
        "description": "Flag to save segmentation scores.",
        "name": "pmer_l",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.2,
        "description": "Flag to Save Inverted Segmentation Mask",
        "name": "pmer_occ",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.05,
        "description": "Overlappoing Tolerance (Percentage)",
        "name": "pmer_over_tol",
        "required": false,
        "type": "float"
      },
      {
        "default": false,
        "description": "Indicate Protein Type",
        "name": "is_membrane",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Reverse membrane normal (For Membrane-Bound Protein)",
        "name": "pmer_reverse_normals",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Polnet team.",
        "url": "https://github.com/anmartinezs/polnet/tree/main"
      }
    ],
    "authors": [
      "Jonathan Schwartz"
    ],
    "license": "MIT",
    "tags": [
      "PDB",
      "grid",
      "surface",
      "structural biology",
      "pns"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 69,
    "group": "polnet",
    "name": "pdb-to-pns",
    "version": "0.2.0",
    "title": "Generate Polnet PNS file from PDB",
    "description": "This solution downloads PDBs and uses Polnet to convert into MRCs, and simulation-compatible textfile.",
    "date": "2024-10-03T09:50:35.807781",
    "args": [
      {
        "description": "PDB ID for the Macromolecule to Model",
        "name": "pdb_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Protein for the Associated PDB ID",
        "name": "protein_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Downloaded PDB File",
        "name": "pdb_write_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Converted PDB file to MRC",
        "name": "mrc_write_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Converted MRC file for Polnet",
        "name": "polnet_write_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Voxel size per \u00c5ngstr\u00f6m, scale of the tomogram resolution",
        "name": "voxel_size",
        "required": false,
        "type": "float"
      },
      {
        "default": 30,
        "description": "Tomogram resolution in \u00c5ngstr\u00f6ms.",
        "name": "resolution",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Isocontour",
        "name": "mmer_iso",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.1,
        "description": "Flag to save segmentation scores.",
        "name": "pmer_l",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.2,
        "description": "Flag to Save Inverted Segmentation Mask",
        "name": "pmer_occ",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.05,
        "description": "Overlappoing Tolerance (Percentage)",
        "name": "pmer_over_tol",
        "required": false,
        "type": "float"
      },
      {
        "default": false,
        "description": "Indicate Protein Type",
        "name": "is_membrane",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Reverse membrane normal (For Membrane-Bound Protein)",
        "name": "pmer_reverse_normals",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Polnet team.",
        "url": "https://github.com/anmartinezs/polnet/tree/main"
      }
    ],
    "authors": [
      "Jonathan Schwartz"
    ],
    "license": "MIT",
    "tags": [
      "PDB",
      "grid",
      "surface",
      "structural biology",
      "pns"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 70,
    "group": "copick",
    "name": "binary-to-multilabel-segmentation",
    "version": "0.0.1",
    "title": "Create Multilabel Segmentation from Individual Segmentations",
    "description": "Creates a multilabel segmentation by combining individual segmentations for all pickable objects, including particles, in a Copick project. Can process a single run or all runs in the project.",
    "date": "2024-10-03T12:07:40.246172",
    "args": [
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to use for the segmentation.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "User ID for input segmentations.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for input segmentations.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process. If not provided, all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "User ID for the output multilabel segmentation.",
        "name": "output_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the new multilabel segmentation.",
        "name": "multilabel_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "segmentation",
      "multilabel"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 71,
    "group": "copick",
    "name": "binary-to-multilabel-segmentation",
    "version": "0.0.2",
    "title": "Create Multilabel Segmentation from Individual Segmentations",
    "description": "Creates a multilabel segmentation by combining individual segmentations for all pickable objects, including particles, in a Copick project. Can process a single run or all runs in the project.",
    "date": "2024-10-03T12:07:40.246172",
    "args": [
      {
        "description": "Path to the Copick configuration file.",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Voxel spacing to use for the segmentation.",
        "name": "voxel_spacing",
        "required": true,
        "type": "float"
      },
      {
        "description": "User ID for input segmentations.",
        "name": "input_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Session ID for input segmentations.",
        "name": "input_session_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the run to process. If not provided, all runs will be processed.",
        "name": "run_name",
        "required": false,
        "type": "string"
      },
      {
        "description": "User ID for the output multilabel segmentation.",
        "name": "output_user_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name for the new multilabel segmentation.",
        "name": "multilabel_name",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "copick",
      "segmentation",
      "multilabel"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 72,
    "group": "polnet",
    "name": "pdb-to-pns",
    "version": "0.3.0",
    "title": "Generate Polnet PNS file from PDB",
    "description": "This solution downloads PDBs and uses Polnet to convert into MRCs, and simulation-compatible textfile.",
    "date": "2024-10-03T09:50:35.807781",
    "args": [
      {
        "description": "PDB ID for the Macromolecule to Model",
        "name": "pdb_id",
        "required": true,
        "type": "string"
      },
      {
        "description": "Name of the Protein for the Associated PDB ID",
        "name": "protein_name",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Downloaded PDB File",
        "name": "pdb_write_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Converted PDB file to MRC",
        "name": "mrc_write_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Folder Path for Where to Save the Converted MRC file for Polnet",
        "name": "polnet_write_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Voxel size per \u00c5ngstr\u00f6m, scale of the tomogram resolution",
        "name": "voxel_size",
        "required": false,
        "type": "float"
      },
      {
        "default": 30,
        "description": "Tomogram resolution in \u00c5ngstr\u00f6ms.",
        "name": "resolution",
        "required": false,
        "type": "float"
      },
      {
        "default": 0,
        "description": "Isocontour",
        "name": "mmer_iso",
        "required": false,
        "type": "float"
      },
      {
        "default": 1.1,
        "description": "Flag to save segmentation scores.",
        "name": "pmer_l",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.2,
        "description": "Flag to Save Inverted Segmentation Mask",
        "name": "pmer_occ",
        "required": false,
        "type": "float"
      },
      {
        "default": 0.05,
        "description": "Overlappoing Tolerance (Percentage)",
        "name": "pmer_over_tol",
        "required": false,
        "type": "float"
      },
      {
        "default": false,
        "description": "Indicate Protein Type",
        "name": "is_membrane",
        "required": false,
        "type": "boolean"
      },
      {
        "default": false,
        "description": "Reverse membrane normal (For Membrane-Bound Protein)",
        "name": "pmer_reverse_normals",
        "required": false,
        "type": "boolean"
      }
    ],
    "citation": [
      {
        "text": "Polnet team.",
        "url": "https://github.com/anmartinezs/polnet/tree/main"
      }
    ],
    "authors": [
      "Jonathan Schwartz"
    ],
    "license": "MIT",
    "tags": [
      "PDB",
      "grid",
      "surface",
      "structural biology",
      "pns"
    ]
  },
  {
    "catalog_name": "copick",
    "catalog_url": "https://github.com/copick/copick-catalog.git",
    "solution_id": 73,
    "group": "polnet",
    "name": "generate-copick-project",
    "version": "0.1.0",
    "title": "Generate a Copick Project with polnet",
    "description": "Generate a Copick Project Composed with polnet simulations.",
    "date": "2024-10-04T22:57:58.281763",
    "args": [
      {
        "description": "Path to the Copick configuration file",
        "name": "copick_config_path",
        "required": true,
        "type": "string"
      },
      {
        "default": 1,
        "description": "Number of Tomograms to Produce Per Specified SNR",
        "name": "num_tomos_per_snr",
        "required": false,
        "type": "integer"
      },
      {
        "default": "0.5",
        "description": "Comma-separated list of SNRs to Apply to Tomograms",
        "name": "snr",
        "required": false,
        "type": "string"
      },
      {
        "default": "-60,60,3",
        "description": "Comma-separated List of Min,Max and Increment for the Tilt Range",
        "name": "tilt_range",
        "required": false,
        "type": "string"
      },
      {
        "default": "630,630,200",
        "description": "Comma-separated List of Tomogram Dimensions (in Pixels)",
        "name": "tomo_shape",
        "required": false,
        "type": "string"
      },
      {
        "default": 10,
        "description": "Voxel Size for Simulated Tomograms",
        "name": "voxel_size",
        "required": false,
        "type": "float"
      },
      {
        "description": "Comma-separated list of protein file paths",
        "name": "proteins_list",
        "required": true,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of membrane protein file paths",
        "name": "mb_proteins_list",
        "required": false,
        "type": "string"
      },
      {
        "default": "",
        "description": "Comma-separated list of membrane file paths",
        "name": "membranes_list",
        "required": false,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Martinez-Sanchez A.*, Jasnin M., Phelippeau H. and Lamm L. Simulating the cellular context in synthetic datasets for cryo-electron tomography, bioRxiv.",
        "url": "https://github.com/anmartinezs/polnet"
      }
    ],
    "authors": [
      "Jonathan Schwartz and Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "synthetic data",
      "deep learning",
      "cryoet",
      "tomogram"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 2,
    "group": "life.computational.solutions",
    "name": "napari",
    "version": "0.0.1-SNAPSHOT",
    "title": "Open napari",
    "description": "Open napari.",
    "date": "2024-08-04T11:39:10.856425",
    "args": [],
    "citation": [
      {
        "doi": "10.5281/zenodo.3555620",
        "text": "napari contributors (2019). napari: a multi-dimensional image viewer for python.",
        "url": "https://github.com/napari/napari"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 3,
    "group": "life.computational.solutions",
    "name": "napari-stable-diffusion",
    "version": "0.0.1-SNAPSHOT",
    "title": "napari-stable-diffusion",
    "description": "Open napari-stable-diffusion.",
    "date": "2023-07-31T07:59:02.513419",
    "args": [
      {
        "description": "The prompt to render with napari-stable-diffusion",
        "name": "prompt",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "napari",
      "stable diffusion"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 4,
    "group": "life.computational.solutions",
    "name": "nesoi",
    "version": "0.0.1-SNAPSHOT",
    "title": "Open napari",
    "description": "Open napari in the nesoi environment.",
    "date": "2023-08-03T21:19:52.856119",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 5,
    "group": "physarum.computational.life",
    "name": "scan-as-png",
    "version": "0.0.1",
    "title": "Scan images as PNGs.",
    "description": "An Album solution for scanning images into PNG files in a directory.",
    "date": "2023-09-10T17:56:06.318881",
    "args": [
      {
        "description": "Directory for saving results.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 6,
    "group": "physarum.computational.life",
    "name": "scan-as-png",
    "version": "0.0.2",
    "title": "Scan images as PNGs.",
    "description": "An Album solution for scanning images into PNG files in a directory.",
    "date": "2023-09-10T17:56:06.318881",
    "args": [
      {
        "description": "Directory for saving results.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 7,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.1",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 8,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.2",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 9,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.3",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 10,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.4",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 11,
    "group": "physarum.computational.life",
    "name": "parent-environment",
    "version": "0.0.1",
    "title": "Parent environment for physarum.computational.life.",
    "description": "A parent environment for physarum.computational.life solutions",
    "date": "2023-11-19T22:54:51.947025",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 12,
    "group": "physarum.computational.life",
    "name": "parent-environment",
    "version": "0.0.2",
    "title": "Parent environment for physarum.computational.life.",
    "description": "A parent environment for physarum.computational.life solutions",
    "date": "2023-11-19T22:54:51.947025",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 13,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.5",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 14,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.6",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 15,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.7",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 16,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.8",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 17,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.9",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 18,
    "group": "physarum.computational.life",
    "name": "parent-environment",
    "version": "0.0.3",
    "title": "Parent environment for physarum.computational.life.",
    "description": "A parent environment for physarum.computational.life solutions",
    "date": "2023-11-19T22:54:51.947025",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 19,
    "group": "physarum.computational.life",
    "name": "view-physarum-napari",
    "version": "0.0.1",
    "title": "Open a Physarum zarr in napari.",
    "description": "An Album solution for viewing a Physarum zarr",
    "date": "2023-09-19T20:42:28.897698",
    "args": [
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "zarr",
      "Python",
      "napari",
      "visualization",
      "Physarum"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 20,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.10",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 21,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.0.12",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 22,
    "group": "cryoet.kyleharrington.com",
    "name": "cryoet-napari",
    "version": "0.0.1",
    "title": "Parent environment for some napari cryoet tools.",
    "description": "A parent environment for cryoet solutions",
    "date": "2023-09-21T10:26:57.522327",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "cryoet",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 23,
    "group": "physarum.computational.life",
    "name": "scan-as-zarr",
    "version": "0.0.1",
    "title": "Scan images as zarr.",
    "description": "An Album solution for scanning a timeseries into a zarr file.",
    "date": "2023-09-25T23:09:33.778056",
    "args": [
      {
        "description": "Zarr path for saving results.",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "zarr"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 24,
    "group": "physarum.computational.life",
    "name": "scan-as-zarr",
    "version": "0.0.2",
    "title": "Scan images as zarr.",
    "description": "An Album solution for scanning a timeseries into a zarr file.",
    "date": "2023-09-25T23:09:33.778056",
    "args": [
      {
        "description": "Zarr path for saving results.",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "zarr"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 25,
    "group": "physarum.computational.life",
    "name": "scan-as-zarr",
    "version": "0.0.3",
    "title": "Scan images as zarr.",
    "description": "An Album solution for scanning a timeseries into a zarr file.",
    "date": "2023-09-25T23:09:33.778056",
    "args": [
      {
        "description": "Zarr path for saving results.",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "zarr"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 26,
    "group": "physarum.computational.life",
    "name": "scan-as-zarr",
    "version": "0.0.4",
    "title": "Scan images as zarr.",
    "description": "An Album solution for scanning a timeseries into a zarr file.",
    "date": "2023-09-25T23:09:33.778056",
    "args": [
      {
        "description": "Zarr path for saving results.",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "zarr"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 27,
    "group": "physarum.computational.life",
    "name": "scan-as-zarr",
    "version": "0.0.5",
    "title": "Scan images as zarr.",
    "description": "An Album solution for scanning a timeseries into a zarr file.",
    "date": "2023-09-25T23:09:33.778056",
    "args": [
      {
        "description": "Zarr path for saving results.",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "zarr"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 28,
    "group": "physarum.computational.life",
    "name": "scan-as-zarr",
    "version": "0.0.6",
    "title": "Scan images as zarr.",
    "description": "An Album solution for scanning a timeseries into a zarr file.",
    "date": "2023-09-25T23:09:33.778056",
    "args": [
      {
        "description": "Zarr path for saving results.",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "zarr"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 29,
    "group": "physarum.computational.life",
    "name": "livestream-as-png",
    "version": "0.0.1",
    "title": "Livestream images as PNGs.",
    "description": "An Album solution for scanning images into PNG files in a directory and live tooting.",
    "date": "2023-09-29T21:58:41.026556",
    "args": [
      {
        "description": "Directory for saving results.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Device id for scanimage to use",
        "name": "device",
        "required": true,
        "type": "string"
      },
      {
        "default": "120",
        "description": "Timestep for scanning",
        "name": "timestep",
        "required": true,
        "type": "string"
      },
      {
        "default": "10",
        "description": "Frequency for sending toots, every X timesteps",
        "name": "toot_frequency",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "scanning",
      "acquisition",
      "Python",
      "mastodon"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 31,
    "group": "com.kyleharrington",
    "name": "fiji_parent",
    "version": "0.1.1",
    "title": "Java-based software parent solution",
    "description": "Parent of Java-based software solutions: Fiji, ImageJ, ImgLib2, etc.",
    "date": "2023-11-09T21:55:53.831854",
    "args": [],
    "citation": [
      {
        "text": "SciJava community.",
        "url": "https://github.com/scijava"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "java",
      "fiji",
      "bigdataviewer",
      "imagej",
      "scijava"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 32,
    "group": "sc.iview",
    "name": "sciview",
    "version": "0.1.1",
    "title": "sciview",
    "description": "sciview is a 3D/VR/AR visualization tool for large data from the Fiji community",
    "date": "2023-11-09T22:14:43.425927",
    "args": [],
    "citation": [
      {
        "text": "sciview team.",
        "url": "https://github.com/scenerygraphics/sciview"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "sciview",
      "fiji",
      "imagej",
      "3d",
      "vr",
      "ar"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 33,
    "group": "sc.iview",
    "name": "sciview",
    "version": "0.1.2",
    "title": "sciview",
    "description": "sciview is a 3D/VR/AR visualization tool for large data from the Fiji community",
    "date": "2023-11-09T22:14:43.425927",
    "args": [],
    "citation": [
      {
        "text": "sciview team.",
        "url": "https://github.com/scenerygraphics/sciview"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "sciview",
      "fiji",
      "imagej",
      "3d",
      "vr",
      "ar"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 34,
    "group": "sc.iview",
    "name": "sciview",
    "version": "0.1.3",
    "title": "sciview",
    "description": "sciview is a 3D/VR/AR visualization tool for large data from the Fiji community",
    "date": "2023-11-09T22:14:43.425927",
    "args": [],
    "citation": [
      {
        "text": "sciview team.",
        "url": "https://github.com/scenerygraphics/sciview"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "sciview",
      "fiji",
      "imagej",
      "3d",
      "vr",
      "ar"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 36,
    "group": "physarum.computational.life",
    "name": "parent-environment",
    "version": "0.0.4",
    "title": "Parent environment for physarum.computational.life.",
    "description": "A parent environment for physarum.computational.life solutions",
    "date": "2023-11-19T22:54:51.947025",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 37,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.1.1",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 38,
    "group": "physarum.computational.life",
    "name": "pngs-to-zarr",
    "version": "0.1.2",
    "title": "Convert PNGs to zarr.",
    "description": "An Album solution for converting a directory of PNGs into a zarr",
    "date": "2023-11-19T23:10:50.236030",
    "args": [
      {
        "description": "Directory for PNG images.",
        "name": "png_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Path for saving zarrs",
        "name": "zarr_path",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 39,
    "group": "physarum.computational.life",
    "name": "split-dishes-pngs",
    "version": "0.0.1",
    "title": "Split pngs into subdirs of cropped dishes.",
    "description": "Split pngs into subdirs of cropped dishes.",
    "date": "2023-12-02T17:56:58.866559",
    "args": [
      {
        "description": "Directory for input PNG images.",
        "name": "input_directory",
        "required": true,
        "type": "string"
      },
      {
        "description": "Directory for output PNG images.",
        "name": "output_directory",
        "required": true,
        "type": "string"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington.",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "imaging",
      "png",
      "zarr",
      "Python"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 40,
    "group": "kyleharrington",
    "name": "download-pdbs",
    "version": "0.0.1",
    "title": "PDB File Downloader",
    "description": "A utility to download PDB files from a list of PDB IDs.",
    "date": "2023-12-04T21:05:36.698646",
    "args": [
      {
        "description": "Comma-separated list of PDB IDs to download",
        "name": "pdbs",
        "type": "string"
      }
    ],
    "citation": [],
    "authors": [
      "Your Name"
    ],
    "license": "MIT",
    "tags": [
      "bioinformatics",
      "PDB",
      "protein structures",
      "data download"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 41,
    "group": "cellular-automata",
    "name": "game-of-life",
    "version": "0.0.1",
    "title": "Game of Life Simulation using pygfx",
    "description": "An album solution to run a Game of Life simulation using pygfx with zoom functionality.",
    "date": "2024-08-11T21:18:43.305405",
    "args": [],
    "citation": [
      {
        "text": "Conway's Game of Life",
        "url": "https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "Python",
      "Game of Life"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 42,
    "group": "environments",
    "name": "physical-simulation",
    "version": "0.0.1",
    "title": "An environment to support multiple physical visualized artificial life simulations",
    "description": "An album solution that contains a generalized environment for alife simulations.",
    "date": "2024-09-07T09:45:52.320386",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 43,
    "group": "3d-simulations",
    "name": "boids-swarm-simulation",
    "version": "0.0.1",
    "title": "Boids Swarm Simulation using pygfx and pybullet",
    "description": "An album solution to run a Boids swarm simulation using pygfx and pybullet.",
    "date": "2024-08-11T21:17:55.201227",
    "args": [
      {
        "description": "Number of boids in the simulation",
        "name": "num_boids",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of boids",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Maximum force applied to boids",
        "name": "max_force",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for separation between boids",
        "name": "separation_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for alignment between boids",
        "name": "alignment_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for cohesion between boids",
        "name": "cohesion_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Boids Algorithm",
        "url": "https://en.wikipedia.org/wiki/Boids"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "pybullet",
      "Python",
      "Boids",
      "swarm"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 44,
    "group": "3d-simulations",
    "name": "boids-swarm-simulation",
    "version": "0.0.2",
    "title": "Boids Swarm Simulation using pygfx and pybullet",
    "description": "An album solution to run a Boids swarm simulation using pygfx and pybullet.",
    "date": "2024-08-11T21:17:55.201227",
    "args": [
      {
        "description": "Number of boids in the simulation",
        "name": "num_boids",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of boids",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Maximum force applied to boids",
        "name": "max_force",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for separation between boids",
        "name": "separation_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for alignment between boids",
        "name": "alignment_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for cohesion between boids",
        "name": "cohesion_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Boids Algorithm",
        "url": "https://en.wikipedia.org/wiki/Boids"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "pybullet",
      "Python",
      "Boids",
      "swarm"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 45,
    "group": "environments",
    "name": "physical-simulation",
    "version": "0.0.2",
    "title": "An environment to support multiple physical visualized artificial life simulations",
    "description": "An album solution that contains a generalized environment for alife simulations.",
    "date": "2024-09-07T09:45:52.320386",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 46,
    "group": "3d-simulations",
    "name": "boids-swarm-simulation",
    "version": "0.0.4",
    "title": "Boids Swarm Simulation using pygfx and pybullet",
    "description": "An album solution to run a Boids swarm simulation using pygfx and pybullet.",
    "date": "2024-08-11T21:17:55.201227",
    "args": [
      {
        "description": "Number of boids in the simulation",
        "name": "num_boids",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of boids",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Maximum force applied to boids",
        "name": "max_force",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for separation between boids",
        "name": "separation_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for alignment between boids",
        "name": "alignment_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for cohesion between boids",
        "name": "cohesion_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Boids Algorithm",
        "url": "https://en.wikipedia.org/wiki/Boids"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "pybullet",
      "Python",
      "Boids",
      "swarm"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 47,
    "group": "3d-simulations",
    "name": "snake-simulation",
    "version": "0.0.1",
    "title": "Snake-like Simulation using pygfx and NumPy",
    "description": "An album solution to run a snake-like simulation using pygfx and NumPy with Hooke-style springs, sinusoidal joint rotations, gravity, and floor interactions.",
    "date": "2024-07-20T21:43:52.573971",
    "args": [
      {
        "description": "Number of agents in the simulation",
        "name": "num_agents",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of agents",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Spring constant for Hookes Law",
        "name": "spring_constant",
        "required": false,
        "type": "float"
      },
      {
        "description": "Damping factor for the springs",
        "name": "damping",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      },
      {
        "description": "Gravitational force applied to the agents",
        "name": "gravity",
        "required": false,
        "type": "float"
      },
      {
        "description": "Elasticity of the floor when agents collide with it",
        "name": "floor_elasticity",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "NumPy",
      "Python",
      "snake",
      "spring",
      "gravity"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 48,
    "group": "3d-simulations",
    "name": "snake-simulation",
    "version": "0.0.2",
    "title": "Snake-like Simulation using pygfx and NumPy",
    "description": "An album solution to run a snake-like simulation using pygfx and NumPy with Hooke-style springs, sinusoidal joint rotations, gravity, and floor interactions.",
    "date": "2024-07-20T21:43:52.573971",
    "args": [
      {
        "description": "Number of agents in the simulation",
        "name": "num_agents",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of agents",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Spring constant for Hookes Law",
        "name": "spring_constant",
        "required": false,
        "type": "float"
      },
      {
        "description": "Damping factor for the springs",
        "name": "damping",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      },
      {
        "description": "Gravitational force applied to the agents",
        "name": "gravity",
        "required": false,
        "type": "float"
      },
      {
        "description": "Elasticity of the floor when agents collide with it",
        "name": "floor_elasticity",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "NumPy",
      "Python",
      "snake",
      "spring",
      "gravity"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 49,
    "group": "3d-simulations",
    "name": "virtual-creatures-simulation",
    "version": "0.0.1",
    "title": "Virtual Creatures Simulation using pygfx and NumPy",
    "description": "An album solution to run a virtual creatures simulation using pygfx and NumPy with Hooke-style springs, sinusoidal joint rotations, gravity, and floor interactions. The agents are randomly connected.",
    "date": "2024-07-21T17:50:30.988427",
    "args": [
      {
        "description": "Number of agents in the simulation",
        "name": "num_agents",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of agents",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Spring constant for Hookes Law",
        "name": "spring_constant",
        "required": false,
        "type": "float"
      },
      {
        "description": "Damping factor for the springs",
        "name": "damping",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      },
      {
        "description": "Gravitational force applied to the agents",
        "name": "gravity",
        "required": false,
        "type": "float"
      },
      {
        "description": "Elasticity of the floor when agents collide with it",
        "name": "floor_elasticity",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "NumPy",
      "Python",
      "virtual creatures",
      "spring",
      "gravity"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 61,
    "group": "environments",
    "name": "napari",
    "version": "0.0.1",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 62,
    "group": "tiling",
    "name": "penrose-tiling",
    "version": "0.0.1",
    "title": "Penrose Tiling",
    "description": "An Album solution that generates and displays Penrose tiling patterns using napari.",
    "date": "2024-08-11T21:21:05.551876",
    "args": [
      {
        "default": 6,
        "description": "Number of generations for tile deflation",
        "name": "num_generations",
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "tiling",
      "python",
      "napari",
      "geometry",
      "penrose"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 63,
    "group": "environments",
    "name": "napari",
    "version": "0.0.2",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 64,
    "group": "tiling",
    "name": "penrose-tiling",
    "version": "0.0.2",
    "title": "Penrose Tiling",
    "description": "An Album solution that generates and displays Penrose tiling patterns using napari.",
    "date": "2024-08-11T21:21:05.551876",
    "args": [
      {
        "default": 6,
        "description": "Number of generations for tile deflation",
        "name": "num_generations",
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "tiling",
      "python",
      "napari",
      "geometry",
      "penrose"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 65,
    "group": "tiling",
    "name": "penrose-tiling",
    "version": "0.0.3",
    "title": "Penrose Tiling",
    "description": "An Album solution that generates and displays Penrose tiling patterns using napari.",
    "date": "2024-08-11T21:21:05.551876",
    "args": [
      {
        "default": 6,
        "description": "Number of generations for tile deflation",
        "name": "num_generations",
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "tiling",
      "python",
      "napari",
      "geometry",
      "penrose"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 66,
    "group": "patterns",
    "name": "recursive-pattern",
    "version": "0.0.1",
    "title": "Recursive Pattern Generation",
    "description": "An Album solution that generates recursive patterns and displays them using Napari.",
    "date": "2024-08-11T21:20:25.322029",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "recursive",
      "pattern",
      "python",
      "napari",
      "geometry"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 67,
    "group": "life.computational.solutions",
    "name": "napari",
    "version": "0.0.2",
    "title": "Open napari",
    "description": "Open napari.",
    "date": "2024-08-04T11:39:10.856425",
    "args": [],
    "citation": [
      {
        "doi": "10.5281/zenodo.3555620",
        "text": "napari contributors (2019). napari: a multi-dimensional image viewer for python.",
        "url": "https://github.com/napari/napari"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Python",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 68,
    "group": "environments",
    "name": "napari",
    "version": "0.0.3",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 69,
    "group": "patterns",
    "name": "particle-sands",
    "version": "0.0.1",
    "title": "Particle sands v02 pattern",
    "description": "An Album solution that generates particle patterns and displays them using Napari.",
    "date": "2024-08-11T21:20:04.322852",
    "args": [],
    "citation": [
      {
        "text": "Original by Samuel Yan: https://openprocessing.org/user/293890?view=sketches&o=48.",
        "url": "https://openprocessing.org/sketch/1353598"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "particles",
      "pattern",
      "python",
      "napari",
      "particles"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 70,
    "group": "environments",
    "name": "napari",
    "version": "0.0.4",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 71,
    "group": "patterns",
    "name": "particle-sands",
    "version": "0.0.2",
    "title": "Particle sands v02 pattern",
    "description": "An Album solution that generates particle patterns and displays them using Napari.",
    "date": "2024-08-11T21:20:04.322852",
    "args": [],
    "citation": [
      {
        "text": "Original by Samuel Yan: https://openprocessing.org/user/293890?view=sketches&o=48.",
        "url": "https://openprocessing.org/sketch/1353598"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "particles",
      "pattern",
      "python",
      "napari",
      "particles"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 72,
    "group": "environments",
    "name": "napari",
    "version": "0.0.5",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 73,
    "group": "patterns",
    "name": "recursive-pattern",
    "version": "0.0.2",
    "title": "Recursive Pattern Generation",
    "description": "An Album solution that generates recursive patterns and displays them using Napari.",
    "date": "2024-08-11T21:20:25.322029",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "recursive",
      "pattern",
      "python",
      "napari",
      "geometry"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 74,
    "group": "automata",
    "name": "langtons-ant",
    "version": "0.0.1",
    "title": "Langton's Ant Simulation",
    "description": "An Album solution that simulates Langton's Ant and displays it using napari.",
    "date": "2024-08-11T21:18:23.017575",
    "args": [],
    "citation": [
      {
        "text": "Langton, C.G., 1986. Studying artificial life with cellular automata. Physica D: nonlinear phenomena, 22(1-3), pp.120-149."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Langton's Ant",
      "automata",
      "napari",
      "simulation"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 75,
    "group": "l-systems",
    "name": "barnsley-fern",
    "version": "0.0.4",
    "title": "Barnsley Fern L-System",
    "description": "An album solution that generates and displays a Barnsley Fern L-system using napari. The fern transitions from brown to green as it grows.",
    "date": "2024-08-11T21:19:09.143167",
    "args": [
      {
        "default": 25,
        "description": "The angle in degrees for each turn.",
        "name": "angle",
        "required": false,
        "type": "float"
      },
      {
        "default": 5,
        "description": "The number of iterations to generate the L-system string.",
        "name": "iterations",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Prusinkiewicz, P., & Lindenmayer, A. (1990). The algorithmic beauty of plants. Springer Science & Business Media."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "L-System",
      "Barnsley Fern",
      "generative",
      "napari",
      "simulation"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 76,
    "group": "environments",
    "name": "napari",
    "version": "0.0.6",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 77,
    "group": "terrain",
    "name": "dynamic-terrain",
    "version": "0.0.2",
    "title": "3D Terrain Visualization with Perlin Noise",
    "description": "An Album solution that visualizes 3D terrain using Perlin noise and displays it as a dynamically changing surface using napari.",
    "date": "2024-08-11T21:20:43.428324",
    "args": [],
    "citation": [
      {
        "text": "Perlin, K., 1985. An image synthesizer. ACM SIGGRAPH Computer Graphics, 19(3), pp.287-296."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Perlin Noise",
      "3D Terrain",
      "napari",
      "visualization"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 78,
    "group": "environments",
    "name": "napari",
    "version": "0.0.7",
    "title": "An environment for visualizing artificial life simulations",
    "description": "An album solution that provides a generalized environment for visualizing alife simulations using napari.",
    "date": "2024-08-11T21:13:53.381136",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 79,
    "group": "environments",
    "name": "physical-simulation",
    "version": "0.0.3",
    "title": "An environment to support multiple physical visualized artificial life simulations",
    "description": "An album solution that contains a generalized environment for alife simulations.",
    "date": "2024-09-07T09:45:52.320386",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 80,
    "group": "3d-simulations",
    "name": "boids-swarm-simulation",
    "version": "0.0.5",
    "title": "Boids Swarm Simulation using pygfx and pybullet",
    "description": "An album solution to run a Boids swarm simulation using pygfx and pybullet.",
    "date": "2024-08-11T21:17:55.201227",
    "args": [
      {
        "description": "Number of boids in the simulation",
        "name": "num_boids",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Maximum speed of boids",
        "name": "max_speed",
        "required": false,
        "type": "float"
      },
      {
        "description": "Maximum force applied to boids",
        "name": "max_force",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for separation between boids",
        "name": "separation_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for alignment between boids",
        "name": "alignment_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Distance for cohesion between boids",
        "name": "cohesion_dist",
        "required": false,
        "type": "float"
      },
      {
        "description": "Size of the boundary for the simulation",
        "name": "boundary_size",
        "required": false,
        "type": "float"
      }
    ],
    "citation": [
      {
        "text": "Boids Algorithm",
        "url": "https://en.wikipedia.org/wiki/Boids"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "pybullet",
      "Python",
      "Boids",
      "swarm"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 81,
    "group": "automata",
    "name": "langtons-ant",
    "version": "0.0.2",
    "title": "Langton's Ant Simulation",
    "description": "An Album solution that simulates Langton's Ant and displays it using napari.",
    "date": "2024-08-11T21:18:23.017575",
    "args": [],
    "citation": [
      {
        "text": "Langton, C.G., 1986. Studying artificial life with cellular automata. Physica D: nonlinear phenomena, 22(1-3), pp.120-149."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Langton's Ant",
      "automata",
      "napari",
      "simulation"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 82,
    "group": "cellular-automata",
    "name": "game-of-life",
    "version": "0.0.2",
    "title": "Game of Life Simulation using pygfx",
    "description": "An album solution to run a Game of Life simulation using pygfx with zoom functionality.",
    "date": "2024-08-11T21:18:43.305405",
    "args": [],
    "citation": [
      {
        "text": "Conway's Game of Life",
        "url": "https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "pygfx",
      "Python",
      "Game of Life"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 83,
    "group": "l-systems",
    "name": "barnsley-fern",
    "version": "0.0.5",
    "title": "Barnsley Fern L-System",
    "description": "An album solution that generates and displays a Barnsley Fern L-system using napari. The fern transitions from brown to green as it grows.",
    "date": "2024-08-11T21:19:09.143167",
    "args": [
      {
        "default": 25,
        "description": "The angle in degrees for each turn.",
        "name": "angle",
        "required": false,
        "type": "float"
      },
      {
        "default": 5,
        "description": "The number of iterations to generate the L-system string.",
        "name": "iterations",
        "required": false,
        "type": "integer"
      }
    ],
    "citation": [
      {
        "text": "Prusinkiewicz, P., & Lindenmayer, A. (1990). The algorithmic beauty of plants. Springer Science & Business Media."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "L-System",
      "Barnsley Fern",
      "generative",
      "napari",
      "simulation"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 84,
    "group": "patterns",
    "name": "particle-sands",
    "version": "0.0.3",
    "title": "Particle sands v02 pattern",
    "description": "An Album solution that generates particle patterns and displays them using Napari.",
    "date": "2024-08-11T21:20:04.322852",
    "args": [],
    "citation": [
      {
        "text": "Original by Samuel Yan: https://openprocessing.org/user/293890?view=sketches&o=48.",
        "url": "https://openprocessing.org/sketch/1353598"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "particles",
      "pattern",
      "python",
      "napari",
      "particles"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 85,
    "group": "patterns",
    "name": "recursive-pattern",
    "version": "0.0.3",
    "title": "Recursive Pattern Generation",
    "description": "An Album solution that generates recursive patterns and displays them using Napari.",
    "date": "2024-08-11T21:20:25.322029",
    "args": [],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "recursive",
      "pattern",
      "python",
      "napari",
      "geometry"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 86,
    "group": "terrain",
    "name": "dynamic-terrain",
    "version": "0.0.3",
    "title": "3D Terrain Visualization with Perlin Noise",
    "description": "An Album solution that visualizes 3D terrain using Perlin noise and displays it as a dynamically changing surface using napari.",
    "date": "2024-08-11T21:20:43.428324",
    "args": [],
    "citation": [
      {
        "text": "Perlin, K., 1985. An image synthesizer. ACM SIGGRAPH Computer Graphics, 19(3), pp.287-296."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Perlin Noise",
      "3D Terrain",
      "napari",
      "visualization"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 87,
    "group": "tiling",
    "name": "penrose-tiling",
    "version": "0.0.4",
    "title": "Penrose Tiling",
    "description": "An Album solution that generates and displays Penrose tiling patterns using napari.",
    "date": "2024-08-11T21:21:05.551876",
    "args": [
      {
        "default": 6,
        "description": "Number of generations for tile deflation",
        "name": "num_generations",
        "type": "integer"
      }
    ],
    "citation": [],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "tiling",
      "python",
      "napari",
      "geometry",
      "penrose"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 88,
    "group": "environments",
    "name": "interactive-napari",
    "version": "0.0.1",
    "title": "An environment for interactive napari work",
    "description": "An album solution that provides a generalized environment interactive napari solutions.",
    "date": "2024-09-07T10:52:47.001919",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 89,
    "group": "interactive",
    "name": "langtons-ant-webcam",
    "version": "0.0.1",
    "title": "Webcam with Langton's Ant",
    "description": "An Album solution that captures a webcam feed and simulates Langton's Ant interacting with the feed using napari.",
    "date": "2024-08-16T21:42:03.647898",
    "args": [],
    "citation": [
      {
        "text": "Langton, C.G., 1986. Studying artificial life with cellular automata. Physica D: nonlinear phenomena, 22(1-3), pp.120-149."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Langton's Ant",
      "automata",
      "napari",
      "webcam"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 90,
    "group": "interactive",
    "name": "langtons-ant-webcam",
    "version": "0.0.2",
    "title": "Webcam with Langton's Ant",
    "description": "An Album solution that captures a webcam feed and simulates Langton's Ant interacting with the feed using napari.",
    "date": "2024-08-16T21:42:03.647898",
    "args": [],
    "citation": [
      {
        "text": "Langton, C.G., 1986. Studying artificial life with cellular automata. Physica D: nonlinear phenomena, 22(1-3), pp.120-149."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Langton's Ant",
      "automata",
      "napari",
      "webcam"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 91,
    "group": "reaction-diffusion",
    "name": "belousov-zhabotinsky",
    "version": "0.0.1",
    "title": "Belousov-Zhabotinsky Reaction Simulation",
    "description": "Simulates the Belousov-Zhabotinsky reaction using the Oregonator model.",
    "date": "2024-09-29T11:48:31.787934",
    "args": [],
    "citation": [
      {
        "text": "Field, R.J., K\u00f6r\u00f6s, E., Noyes, R.M., 1972. Oscillations in chemical systems. I. Detailed mechanism in a system showing temporal oscillations. Journal of the American Chemical Society, 94(25), pp.8649-8664."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "reaction-diffusion",
      "BZ reaction",
      "automata",
      "napari",
      "simulation"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 92,
    "group": "collective-dynamics",
    "name": "boids-webcam",
    "version": "0.0.1",
    "title": "Webcam with Boids",
    "description": "An Album solution that captures a webcam feed and simulates boids interacting with the feed using napari.",
    "date": "2024-09-07T09:39:50.516138",
    "args": [],
    "citation": [
      {
        "text": "Reynolds, C.W., 1987. Flocks, herds and schools: A distributed behavioral model. ACM SIGGRAPH Computer Graphics, 21(4), pp.25-34."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Boids",
      "flocking",
      "napari",
      "webcam"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 93,
    "group": "environments",
    "name": "physical-simulation",
    "version": "0.0.4",
    "title": "An environment to support multiple physical visualized artificial life simulations",
    "description": "An album solution that contains a generalized environment for alife simulations.",
    "date": "2024-09-07T09:45:52.320386",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 94,
    "group": "environments",
    "name": "interactive-napari",
    "version": "0.0.2",
    "title": "An environment for interactive napari work",
    "description": "An album solution that provides a generalized environment interactive napari solutions.",
    "date": "2024-09-07T10:52:47.001919",
    "args": [],
    "citation": [
      {
        "text": "Kyle Harrington",
        "url": "https://kyleharrington.com"
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "simulation",
      "visualization",
      "Python",
      "environment",
      "napari"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 95,
    "group": "collective-dynamics",
    "name": "boids-paint",
    "version": "0.0.2",
    "title": "3D Boids Paint with Pose Tracking controlling boids",
    "description": "An Album solution that simulates boids interacting with hand landmarks tracked from webcam and paints boid positions into a 3D image.",
    "date": "2024-09-14T08:01:05.348699",
    "args": [],
    "citation": [
      {
        "text": "Reynolds, C.W., 1987. Flocks, herds and schools: A distributed behavioral model. ACM SIGGRAPH Computer Graphics, 21(4), pp.25-34."
      }
    ],
    "authors": [
      "Kyle Harrington and Iris Harrington"
    ],
    "license": "MIT",
    "tags": [
      "Boids",
      "flocking",
      "pose",
      "3D",
      "napari",
      "webcam"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 96,
    "group": "reaction-diffusion",
    "name": "belousov-zhabotinsky",
    "version": "0.0.2",
    "title": "Belousov-Zhabotinsky Reaction Simulation",
    "description": "Simulates the Belousov-Zhabotinsky reaction using the Oregonator model.",
    "date": "2024-09-29T11:48:31.787934",
    "args": [],
    "citation": [
      {
        "text": "Field, R.J., K\u00f6r\u00f6s, E., Noyes, R.M., 1972. Oscillations in chemical systems. I. Detailed mechanism in a system showing temporal oscillations. Journal of the American Chemical Society, 94(25), pp.8649-8664."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "reaction-diffusion",
      "BZ reaction",
      "automata",
      "napari",
      "simulation"
    ]
  },
  {
    "catalog_name": "solutions.computational.life",
    "catalog_url": "https://github.com/kephale/solutions.computational.life.git",
    "solution_id": 97,
    "group": "reaction-diffusion",
    "name": "belousov-zhabotinsky",
    "version": "0.0.3",
    "title": "Belousov-Zhabotinsky Reaction Simulation",
    "description": "Simulates the Belousov-Zhabotinsky reaction using the Oregonator model.",
    "date": "2024-09-29T11:48:31.787934",
    "args": [],
    "citation": [
      {
        "text": "Field, R.J., K\u00f6r\u00f6s, E., Noyes, R.M., 1972. Oscillations in chemical systems. I. Detailed mechanism in a system showing temporal oscillations. Journal of the American Chemical Society, 94(25), pp.8649-8664."
      }
    ],
    "authors": [
      "Kyle Harrington"
    ],
    "license": "MIT",
    "tags": [
      "reaction-diffusion",
      "BZ reaction",
      "automata",
      "napari",
      "simulation"
    ]
  }
]